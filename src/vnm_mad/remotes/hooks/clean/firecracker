#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2020, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

$LOAD_PATH << File.dirname(__FILE__)
$LOAD_PATH << File.join(File.dirname(__FILE__), '../..')

require_relative '../../command'
require_relative '../../vnmmad'

require 'open3'
require 'base64'
require 'rexml/document'

#----------------------------------------------------------------------------
# Constants and helper functions
#----------------------------------------------------------------------------
def command(cmd)
    if VNMMAD::VNMNetwork::COMMANDS.key?(cmd.to_sym)
        cmd_str = (VNMMAD::VNMNetwork::COMMANDS[cmd.to_sym]).to_s
    else
        cmd_str = cmd.to_s
    end

    cmd_str
end

XPATH_NICS = '//TEMPLATE/NIC'
XPATH_HV   = '//HISTORY/VM_MAD'
#----------------------------------------------------------------------------

template64 = STDIN.read
deploy_id  = ARGV[0]

template = REXML::Document.new(Base64.decode64(template64))

hypervisor = template.elements[XPATH_HV].text

exit 0 if hypervisor != 'firecracker'

if deploy_id.nil? || deploy_id.empty?
    vm_id     = template.elements['/VM/ID'].text
    deploy_id = "one-#{vm_id}"
end

rc    = nil
e     = nil
error = false

template.elements.each(XPATH_NICS) do |nic_element|
    nic_id  = Integer(nic_element.elements['NIC_ID'].text)
    if_name = "#{deploy_id}-#{nic_id}"

    # check if interface is already defined
    cmd = "#{command(:ip_unpriv)} link show #{if_name}"
    _, _, rc = Open3.capture3(cmd)

    next unless rc.success?

    # Del tap interface from the bridge
    cmd = "#{command(:ip)} link set #{if_name} nomaster"
    _, e, rc = Open3.capture3(cmd)

    if !rc.success?
        error = true
        break
    end

    # Del tap device
    cmd = "#{command(:ip)} tuntap del #{if_name} mode tap"
    _, e, rc = Open3.capture3(cmd)

    if !rc.success?
        error = true
        break
    end
end

if error
    OpenNebula.log_error(e)
    exit(-1)
end

# rubocop:disable Lint/RescueException
begin
    hm = VNMMAD::NoVLANDriver.from_base64(template64, XPATH_NICS, deploy_id)
    hm.deactivate
rescue Exception => e
    OpenNebula.log_error(e.message)
    OpenNebula.log_error(e.backtrace)
    exit 1
end
# rubocop:enable Lint/RescueException
