#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# Define libraries location
ONE_LOCATION = ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby'
    GEMS_LOCATION     = '/usr/share/one/gems'
    VMDIR             = '/var/lib/one'
    CONFIG_FILE       = '/var/lib/one/config'
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     = ONE_LOCATION + '/share/gems'
    VMDIR             = ONE_LOCATION + '/var'
    CONFIG_FILE       = ONE_LOCATION + '/var/config'
end

if File.directory?(GEMS_LOCATION)
    Gem.use_paths(GEMS_LOCATION)
end

$LOAD_PATH << RUBY_LIB_LOCATION

$LOAD_PATH << File.dirname(__FILE__)
$LOAD_PATH << File.join(File.dirname(__FILE__), '..')

require 'vnmmad'
require 'nokogiri'
require 'opennebula'
require 'vcenter_driver'
require 'nsx_driver'
require 'ipaddr'

def to_nets(ip_start, size)
    nets = Array.new

    begin
        ipaddr = IPAddr.new ip_start
    rescue
        return
    end

    ip_i = ipaddr.to_i

    if ipaddr.ipv4?
        ip_length = 32
    elsif ipaddr.ipv6?
        ip_length = 128
    else
        return
    end

    # Find the largest address block (look for the first 1-bit)
    lblock = 0

    lblock += 1 while (ip_i[lblock] == 0 && lblock < ip_length )

    # Allocate whole blocks till the size fits
    while ( size >= 2**lblock )
        nets << "#{IPAddr.new(ip_i, ipaddr.family).to_s}/#{ip_length-lblock}"

        ip_i += 2**lblock
        size -= 2**lblock

        lblock += 1 while (ip_i[lblock] == 0 && lblock < ip_length )
    end

    # Fit remaining address blocks
    ip_length.downto(0) { |i|
        next if size[i] == 0

        nets << "#{IPAddr.new(ip_i, ipaddr.family).to_s}/#{ip_length-i}"

        ip_i += 2**i
    }

    return nets
end

def extract_vnet_data(vnet_id)
    # Create client to communicate with OpenNebula
    one_client = OpenNebula::Client.new

    # Get the network XML from OpenNebula
    # This is potentially different from the Netowrk Template
    # provided as the API call argument
    one_vnet = OpenNebula::VirtualNetwork.new_with_id(vnet_id, one_client)
    rc = one_vnet.info
    if OpenNebula.is_error?(rc)
        err_msg = rc.message
        raise CreateNetworkError, err_msg
    end

    vnet_data = {
        :nsxid => one_vnet['TEMPLATE/NSX_ID'],
        :name => one_vnet['NAME']
    }

    vnet_data
end

def extract_nic_data(nic, nsx_client, vm)
    # Network attributes
    nic_id = nic.xpath('NIC_ID').text
    nic_lp = nil
    network_id = nic.xpath('NETWORK_ID').text
    network_vcref = nic.xpath('VCENTER_NET_REF').text
    network_pgtype = nic.xpath('VCENTER_PORTGROUP_TYPE').text
    network_mac = nic.xpath('MAC').text

    # Virtual Machine devices
    vm_devices = vm.item.config.hardware.device
    vm_devices.each do |device|
        next unless vm.is_nic?(device)

        next if device.macAddress != network_mac

        case network_pgtype
        when NSXDriver::NSXConstants::NSXT_LS_TYPE
            lpid = device.externalId
            nic_lp = NSXDriver::LogicalPort.new_child(nsx_client, lpid)
            raise "Logical port with id: #{lpid} nor found" unless nic_lp
            # target_id => id
            # target_display_name => display_name
            # target_type => resource_type
        when NSXDriver::NSXConstants::NSXV_LS_TYPE
            device.backing.port.portGroupKey
        else
            error_msg = "Network type is: #{network_pgtype} \
                            and should be \
                            #{NSXDriver::NSXConstants::NSXT_LS_TYPE} \
                            or #{NSXDriver::NSXConstants::NSXV_LS_TYPE}"
            error = NSXDriver::NSXError::UnknownObject.new(error_msg)
            STDERR.puts error_msg
            raise error
        end
    end

    nic_data = {
        :id => nic_id,
        :network_id => network_id,
        :network_vcref => network_vcref,
        :lp => nic_lp
    }

    nic_data
end

template = Base64.decode64(STDIN.read)
template_xml = Nokogiri::XML(template)

# OpenNebula VM
vm_data = {
    :id => template_xml.xpath('//VM/ID').text,
    :deploy_id => template_xml.xpath('//DEPLOY_ID').text
}
one_vm = VCenterDriver::VIHelper
         .one_item(OpenNebula::VirtualMachine, vm_data[:id])
one_vm_name = one_vm['NAME']

# OpenNebula host
host_name = template_xml
            .xpath('//HISTORY_RECORDS/HISTORY[last()]/HOSTNAME').text
one_host = VCenterDriver::VIHelper
           .find_by_name(OpenNebula::HostPool, host_name)
rc = one_host.info
if OpenNebula.is_error?(rc)
    err_msg = rc.message
    raise err_msg
end

host_id = one_host['ID']

# vCenter VirtualMachine
vi_client = VCenterDriver::VIClient.new_from_host(host_id)
vm = VCenterDriver::VirtualMachine.new_from_ref(vi_client,
                                                vm_data[:deploy_id],
                                                one_vm_name)

# NSX Objects
nsx_client = NSXDriver::NSXTClient.new_from_id(host_id)
dfw = NSXDriver::DistributedFirewall.new_child(nsx_client)
nsx_rule = NSXDriver::NSXRule.new_child(nsx_client)
ls = NSXDriver::LogicalSwitch.new(nsx_client)
nsx_nics = ls.nsx_new_nics(template_xml)

exit 0 if nsx_nics.empty?

# NICs
# Inspect each nic with attach="yes"
nsx_nics.each do |nic|
    # Extract NIC data
    nic_data = extract_nic_data(nic, nsx_client, vm)
    # Get all Security Groups belonging to each NIC.
    sec_groups = nic.xpath('SECURITY_GROUPS').text.split(',')
    sec_groups.each do |sec_group|
        sg_rules_array = []
        # Get all rules belonging to this Security Group.
        sg_rules = template_xml.xpath("//SECURITY_GROUP_RULE[SECURITY_GROUP_ID=#{sec_group}]")
        sg_rules.each do |sg_rule|
            # Create rules spec
            rule_data = nsx_rule.extract_rule_data(sg_rule)
            rule_spec = nsx_rule.create_rule_spec(rule_data, vm_data, nic_data)
            sg_rules_array.push(rule_spec)
        end
        # Create NSX rules
        sg_rules_array.each do |sg_spec|
            begin
                dfw.create_rule(sg_spec)
            rescue StandardError => e
                STDERR.puts e.message
                STDERR.puts e.backtrace \
                    if VCenterDriver::CONFIG[:debug_information]
                dfw.clear_opennebula_rules(template)
                exit 1
            end
        end
    end
end

exit 0
