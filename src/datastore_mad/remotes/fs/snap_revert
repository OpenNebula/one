#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2016, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

DRV_ACTION=$1
ID=$2

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

TMCOMMON=$LIB_LOCATION/var/remotes/tm/tm_common.sh
DATASTORES=$LIB_LOCATION/var/datastores

. $TMCOMMON
. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh

# -------- Get image and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SOURCE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TARGET_SNAPSHOT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TM_MAD )

BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
DISK_SRC="${XPATH_ELEMENTS[j++]}"
SNAP_ID="${XPATH_ELEMENTS[j++]}"
TM_MAD="${XPATH_ELEMENTS[j++]}"

SRC_PATH=`arg_path $SRC`

SYSTEM_DS_PATH=$(dirname ${SRC_PATH})

SNAP_DIR="${DISK_SRC}.snap"
SNAP_PATH="${SNAP_DIR}/${SNAP_ID}"

if [ -n "$BRIDGE_LIST" ]; then
    log "Revert remote snapshot $SNAP_PATH"
    DST_HOST=`get_destination_host $ID`
    if [ "$TM_MAD" = "qcow2" ]; then
        ACTIVE_SNAP_ID=$(ssh_monitor_and_log "$DST_HOST" "ls $SNAP_DIR | grep '^[[:digit:]]*$' | sort -n | tail -n 1" "Get active snapshot id" 2>&1)
        ACTIVE_SNAP_PATH="${SNAP_DIR}/${ACTIVE_SNAP_ID}"

        ssh_exec_and_log "$DST_HOST" "rm -f $ACTIVE_SNAP_PATH; qemu-img create -f qcow2 -b $SNAP_PATH $ACTIVE_SNAP_PATH" "Error reverting snapshot to $SNAP_PATH"
    else
        ssh_exec_and_log "$DST_HOST" "mv -f $SNAP_PATH $DISK_SRC" "Error reverting snapshot to $SNAP_PATH"
    fi
else
    if [ "$TM_MAD" = "qcow2" ]; then
        ACTIVE_SNAP_ID=$(ls ${SNAP_DIR} | grep '^[[:digit:]]*$' | sort -n | tail -n 1)
        ACTIVE_SNAP_PATH="${SNAP_DIR}/${ACTIVE_SNAP_ID}"

        rm ${ACTIVE_SNAP_PATH}
        qemu-img create -f qcow2 -b ${SNAP_PATH} ${ACTIVE_SNAP_PATH}
    else
        mv -f ${SNAP_PATH} ${DISK_SRC}
    fi
fi
