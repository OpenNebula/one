#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #
if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh

# -------- Get image and datastore arguments from OpenNebula core ------------

DRV_ACTION=`cat -`
ID=$1

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SOURCE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/FORMAT \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TARGET_SNAPSHOT )

BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
DISK_SRC="${XPATH_ELEMENTS[j++]}"
FORMAT="${XPATH_ELEMENTS[j++]}"
SNAP_ID="${XPATH_ELEMENTS[j++]}"

SRC_PATH=$(arg_path $SRC)

DISK_PATH="${DISK_SRC}"

SNAP_DIR="${DISK_PATH}.snap"
SNAP_PATH="${SNAP_DIR}/${SNAP_ID}"

if [ "$FORMAT" = "qcow2" ]; then
    if [ -n "$BRIDGE_LIST" ]; then
        DST_HOST=$(get_destination_host $ID)

        ssh_exec_and_log "$DST_HOST" "qemu-img convert -O qcow2 ${SNAP_PATH} ${DISK_PATH}.tmp" \
            "Error flattening ${SNAP_PATH}"

        ssh_exec_and_log "$DST_HOST" "mv ${DISK_PATH}.tmp ${DISK_PATH}" \
            "Error moving to ${DISK_PATH}"

        ssh_exec_and_log "$DST_HOST" "rm -rf ${SNAP_DIR}" \
            "Error removing ${SNAP_DIR}"
    else
        exec_and_log "qemu-img convert -O qcow2 ${SNAP_PATH} ${DISK_PATH}.tmp" \
            "Error flattening ${SNAP_PATH}"

        exec_and_log "mv ${DISK_PATH}.tmp ${DISK_PATH}" \
            "Error moving to ${DISK_PATH}"

        exec_and_log "rm -rf ${SNAP_DIR}" \
            "Error removing ${SNAP_DIR}"
    fi

else
    if [ -n "$BRIDGE_LIST" ]; then
        DST_HOST=$(get_destination_host $ID)

        ssh_exec_and_log "$DST_HOST" "mv ${SNAP_PATH} ${DISK_PATH}" \
            "Error moving snapshot ${SNAP_PATH}"

        ssh_exec_and_log "$DST_HOST" "rm -rf ${SNAP_DIR}" \
            "Error removing ${SNAP_DIR}"
    else
        exec_and_log "mv ${SNAP_PATH} ${DISK_PATH}" \
            "Error moving snapshot ${SNAP_PATH}"

        exec_and_log "rm -rf ${SNAP_DIR}" \
            "Error removing ${SNAP_DIR}"

        rm -f ${SRC_PATH}.md5sum
    fi
fi
