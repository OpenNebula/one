#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2020, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

###############################################################################
# This script is used to monitor the free and used space of a datastore
###############################################################################

ONE_LOCATION ||= ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

if File.directory?(GEMS_LOCATION)
    Gem.use_paths(GEMS_LOCATION)
    $LOAD_PATH.reject! {|l| l =~ /(vendor|site)_ruby/ }
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

def not_dsid_or_dsref_valid?(ds_id, ds_ref)
    ds_id.nil? || ds_ref.nil?
end

drv_action_enc = ARGV[0]
id             = ARGV[1]

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc),
                          'DS_DRIVER_ACTION_DATA')

ds_id  = drv_action['/DS_DRIVER_ACTION_DATA/DATASTORE/ID']
ds_ref = drv_action['/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VCENTER_DS_REF']
check_valid ds_ref, 'ds_ref'

if not_dsid_or_dsref_valid?(ds_id, ds_ref)
    STDERR.puts 'Not enough information to monitor the datastore.'
    exit(-1)
end

begin
    vi_client = VCenterDriver::VIClient.new_from_datastore(ds_id)

    storage = VCenterDriver::Storage.new_from_ref(ds_ref, vi_client)
    puts storage.monitor
rescue StandardError => e
    message = "Error monitoring datastore #{id}. Reason: \"#{e.message}\"."
    OpenNebula.log_error(message)
    if VCenterDriver::CONFIG[:debug_information]
        STDERR.puts "#{message} #{e.backtrace}"
    end
    exit(-1)
ensure
    vi_client.close_connection if vi_client
end
