#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

###############################################################################
# This script is used retrieve the file size of a disk
###############################################################################

ONE_LOCATION ||= ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

drv_action_enc = STDIN.read

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc),
                          'DS_DRIVER_ACTION_DATA')

DRV_ACTION_DS = '/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/'
DRV_ACTION_IMG = '/DS_DRIVER_ACTION_DATA/IMAGE/'

ds_id        = drv_action['/DS_DRIVER_ACTION_DATA/DATASTORE/ID']
ds_ref       = drv_action[DRV_ACTION_DS + 'VCENTER_DS_REF']
ds_image_dir = drv_action[DRV_ACTION_DS + 'VCENTER_DS_IMAGE_DIR']
               .match(%r{^/*(.*?)/*$})[1] rescue 'one'
img_id       = drv_action[DRV_ACTION_IMG + 'ID']
adapter_type = drv_action[DRV_ACTION_IMG + 'TEMPLATE/VCENTER_ADAPTER_TYPE'] ||
               VCenterDriver::VIHelper
               .get_default('IMAGE/TEMPLATE/VCENTER_ADAPTER_TYPE')
disk_type    = drv_action[DRV_ACTION_IMG + 'TEMPLATE/VCENTER_DISK_TYPE'] ||
               VCenterDriver::VIHelper
               .get_default('IMAGE/TEMPLATE/VCENTER_DISK_TYPE')
size         = drv_action[DRV_ACTION_IMG + 'SIZE']
img_format   = drv_action[DRV_ACTION_IMG + 'FORMAT']

check_valid img_id, 'img_id'
check_valid adapter_type, 'adapter_type'
check_valid disk_type, 'disk_type'
check_valid size, 'size'
check_valid ds_ref, 'ds_ref'

# TODO: path in vCenter? choose a specific directory

img_name = "#{ds_image_dir}/#{img_id}/one-#{img_id}"

if img_format == 'save_as'
    puts img_name + '.vmdk'
    exit 0
end

begin
    vi_client = VCenterDriver::VIClient.new_from_datastore(ds_id)

    ds = VCenterDriver::Datastore.new_from_ref(ds_ref, vi_client)

    puts ds.create_virtual_disk(img_name, size, adapter_type, disk_type)
rescue StandardError => e
    message = "Error creating virtual disk #{img_name}."\
              " Reason: \"#{e.message}\"."
    OpenNebula.log_error(message)
    if VCenterDriver::CONFIG[:debug_information]
        STDERR.puts "#{message} #{e.backtrace}"
    end
    exit(-1)
ensure
    vi_client.close_connection if vi_client
end
