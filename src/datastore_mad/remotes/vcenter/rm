#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

###############################################################################
# This script is used retrieve the file size of a disk
###############################################################################

ONE_LOCATION ||= ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

def img_not_imported?(imported)
    imported.nil? || imported.empty?
end

drv_action_enc = STDIN.read

drv_action =OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc),
                          'DS_DRIVER_ACTION_DATA')

ds_ref = drv_action['/DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/VCENTER_DS_REF']
ds_id = drv_action['/DS_DRIVER_ACTION_DATA/DATASTORE/ID']
img_src = drv_action['/DS_DRIVER_ACTION_DATA/IMAGE/SOURCE']
imported = drv_action['/DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/VCENTER_IMPORTED']

check_valid ds_ref, 'ds_ref'
check_valid img_src, 'img_src'

CDROM = '1'

begin
    if img_not_imported?(imported)
        vi_client = VCenterDriver::VIClient.new_from_datastore(ds_id)
        ds = VCenterDriver::Datastore.new_from_ref(ds_ref, vi_client)

        img_dir = img_src.split('/')[0..-2].join('/')
        img_type = drv_action['/DS_DRIVER_ACTION_DATA/IMAGE/TYPE']

        # Check if file exists before trying to delete it
        ds_name  = ds['name']
        img_path = File.dirname img_src
        img_name = File.basename img_src

        search_params = ds.get_search_params(ds_name, img_path, img_name)

        # Perform search task and return results
        search_task = ds['browser']
                      .SearchDatastoreSubFolders_Task(search_params)
        search_task.wait_for_completion

        if img_type != CDROM
            # delete the disk
            begin
                retries ||= 0
                ds.delete_virtual_disk(img_src)
            rescue StandardError => e
                message = "Delete DISK #{img_name} failed due to "\
                          "\"#{e.message}\" on the attempt \##{retries}."
                OpenNebula.log_error(message)
                if VCenterDriver::CONFIG[:debug_information]
                    STDERR.puts "#{message} #{e.backtrace}"
                end
                sleep VCenterDriver::CONFIG[:retry_interval].to_i
                retry if retries < VCenterDriver::CONFIG[:retries]

                exit(-1)
            end
        else
            # delete the CDROM iso
            begin
                retries ||= 0
                ds.delete_file(img_src)
            rescue StandardError => e
                message = "Delete CDROM #{img_name} failed due to "\
                          "\"#{e.message}\" on the attempt \##{retries}."
                OpenNebula.log_error(message)
                if VCenterDriver::CONFIG[:debug_information]
                    STDERR.puts "#{message} #{e.backtrace}"
                end
                sleep VCenterDriver::CONFIG[:retry_interval].to_i
                retry if retries < VCenterDriver::CONFIG[:retries]

                exit(-1)
            end
        end
        # Erase folder if empty
        ds.rm_directory(img_dir) if ds.dir_empty?(img_dir)
    end
rescue StandardError => e
    if !e.message.start_with?('FileNotFound')
        message = "Error deleting virtual disk #{img_src}."\
                  " Reason: \"#{e.message}\"\n#{e.backtrace}"
        OpenNebula.log_error(message)
        if VCenterDriver::CONFIG[:debug_information]
            STDERR.puts "#{message} #{e.backtrace}"
        end
        exit(-1)
    end
ensure
    vi_client.close_connection if vi_client
end
