#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION ||= ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

id             = ARGV[0]
drv_action_enc = STDIN.read

DRV_ACTION_DS = '/DS_DRIVER_ACTION_DATA/DATASTORE/'

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc),
                          'DS_DRIVER_ACTION_DATA')

target_ds_ref    = drv_action[DRV_ACTION_DS + 'TEMPLATE/VCENTER_DS_REF']
ds_image_dir     = drv_action[DRV_ACTION_DS + 'TEMPLATE/VCENTER_DS_IMAGE_DIR']
                   .match(%r{^/*(.*?)/*$})[1] rescue 'one'
src_path_escaped = drv_action['/DS_DRIVER_ACTION_DATA/IMAGE/PATH']
src_img_id       = drv_action['/DS_DRIVER_ACTION_DATA/IMAGE/CLONING_ID']

src_path = VCenterDriver::FileHelper.unescape_path(src_path_escaped)

check_valid src_img_id, 'cloning id'
check_valid src_path, 'image path'
check_valid target_ds_ref, 'target ds ref'

# Get source ds_ref
source_img = VCenterDriver::VIHelper.one_item(OpenNebula::Image, src_img_id)
source_ds_id = source_img['DATASTORE_ID']
source_ds = VCenterDriver::VIHelper.one_item(OpenNebula::Datastore,
                                             source_ds_id)
source_ds_ref = source_ds['TEMPLATE/VCENTER_DS_REF']

# Generate target path
target_path = "#{ds_image_dir}/#{id}/one-#{id}"

begin
    vi_client = VCenterDriver::VIClient.new_from_datastore(source_ds_id)

    ds = VCenterDriver::Datastore.new_from_ref(source_ds_ref, vi_client)

    target_ds_vc = VCenterDriver::Datastore.new_from_ref(target_ds_ref,
                                                         vi_client)

    target_ds_name = target_ds_vc['name']

    ext = File.extname(src_path)
    ext = '.vmdk' if ext.empty?
    target_path << ext

    puts ds.copy_virtual_disk(src_path, target_ds_vc, target_path)
rescue StandardError => e
    message = "Error cloning img #{src_path} to #{target_ds_name}"\
      " Reason: \"#{e.message}\"."
    OpenNebula.log_error(message)
    if VCenterDriver::CONFIG[:debug_information]
        STDERR.puts "#{message} #{e.backtrace}"
    end
    exit(-1)
ensure
    vi_client.close_connection if vi_client
end
