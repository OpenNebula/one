#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION = "/usr/lib/one/ruby"
    VAR_LOCATION      = "/var/lib/one"
else
    RUBY_LIB_LOCATION = ONE_LOCATION + "/lib/ruby"
    VAR_LOCATION      = ONE_LOCATION + "/var"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/onemarketapp_helper'
require 'one_helper/onemarket_helper'
require 'one_helper/onedatastore_helper'

addons = Dir["/var/lib/one/addons/onemarketapp-*.rb"]

cmd=CommandParser::CmdParser.new(ARGV, addons) do
    usage "`onemarket` <command> [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneMarketPlaceAppHelper.new

    before_proc do
        helper.set_client(options)
    end

    USE={
        :name  => "use",
        :large => "--use",
        :description => "lock use actions"
    }

    MANAGE={
        :name  => "manage",
        :large => "--manage",
        :description => "lock manage actions"
    }

    ADMIN={
        :name  => "admin",
        :large => "--admin",
        :description => "lock admin actions"
    }

    ALL={
        :name  => "all",
        :large => "--all",
        :description => "lock all actions"
    }

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS+OpenNebulaHelper::CLIENT_OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    CREATE_OPTIONS = [OneMarketPlaceHelper::MARKETPLACE]
    EXPORT_OPTIONS = [OneDatastoreHelper::DATASTORE, OneMarketPlaceAppHelper::VMNAME]

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :groupid, OpenNebulaHelper.rname_to_id_desc("GROUP") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "GROUP")
    end

    set :format, :userid, OpenNebulaHelper.rname_to_id_desc("USER") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "USER")
    end

    set :format, :appid, OneMarketPlaceAppHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :appid_list, OneMarketPlaceAppHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneMarketPlaceAppHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new marketplace app in the given marketplace
    EOT

    command :create, create_desc, [:file, nil], :options=>CREATE_OPTIONS +
            OneMarketPlaceAppHelper::TEMPLATE_OPTIONS do

        if options[:marketplace].nil?
            STDERR.puts "Marketplace to save the app is mandatory: "
            STDERR.puts "\t -m marketplace_id"
            exit(-1)
        end

        if args[0] && OneMarketPlaceAppHelper.create_template_options_used?(options)
            STDERR.puts "You can not use both template file and template"<<
                " creation options."
            next -1
        end

        helper.create_resource(options) do |app|
            begin
                if args[0]
                    template=File.read(args[0])
                else
                    res = OneMarketPlaceAppHelper.create_datastore_template(options)

                    if res.first != 0
                        STDERR.puts res.last
                        next -1
                    end

                    template = res.last
                end

                if options[:dry]
                    puts template
                    exit 0
                end

                app.allocate(template, options[:marketplace])
            rescue => e
                STDERR.puts e.message
                exit(-1)
            end
        end
    end

    export_desc = <<-EOT.unindent
        Exports the marketplace app to the OpenNebula cloud
    EOT

    command :export, export_desc, :appid, :name, :options=>EXPORT_OPTIONS  do
        helper.perform_action(args[0], options, "exported") do |obj|

            rc = obj.export({
                :dsid=>options[:datastore],
                :name=>args[1],
                :vmtemplate_name=>options[:vmname]
            })

            next rc if OpenNebula.is_error?(rc)

            rc.each { |key, value|
                puts "#{key.to_s.upcase}"
                value.each{ |id|
                    if OpenNebula.is_error?(id)
                        puts id.to_str
                    else
                        puts "    ID: #{id}"
                    end
                }
            }
        end
    end

    download_desc = <<-EOT.unindent
        Downloads a MarketApp to a file
    EOT

    command :download, download_desc, :appid, :path,
        :options => [OpenNebulaHelper::FORCE] do
        helper.perform_action(args[0],options,"downloaded") do |app|
            download_args = [:marketplaceapp, args[0], args[1], options[:force]]
            OpenNebulaHelper.download_resource_sunstone(*download_args)
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given marketplace app
    EOT

    command :delete, delete_desc, [:range, :appid_list] do
        helper.perform_actions(args[0], options, "deleted") do |app|
            app.delete
        end
    end

    update_desc = <<-EOT.unindent
        Update the template contents for the app. If a path is not provided the
        editor will be launched to modify the current content.
    EOT

    command :update, update_desc, :appid, [:file, nil],
        :options=>OpenNebulaHelper::APPEND do

        helper.perform_action(args[0],options,"modified") do |obj|
            if options[:append]
                str = OpenNebulaHelper.append_template(args[0], obj, args[1])
            else
                str = OpenNebulaHelper.update_template(args[0], obj, args[1])
            end

            obj.update(str, options[:append])
        end
    end

    chgrp_desc = <<-EOT.unindent
        Changes the marketplace app group
    EOT

    command :chgrp, chgrp_desc,[:range, :appid_list], :groupid do
        helper.perform_actions(args[0], options, "Group changed") do |app|
            app.chown(-1, args[1].to_i)
        end
    end

    chown_desc = <<-EOT.unindent
        Changes the marketplace app owner and group
    EOT

    command :chown, chown_desc, [:range, :appid_list], :userid,
            [:groupid, nil] do
        gid = args[2].nil? ? -1 : args[2].to_i

        helper.perform_actions(args[0], options, "Owner/Group changed") do |app|
            app.chown(args[1].to_i, gid)
        end
    end

    chmod_desc = <<-EOT.unindent
        Changes the marketplace app permissions
    EOT

    command :chmod, chmod_desc, [:range, :appid_list], :octet do
        helper.perform_actions(args[0], options, "Permissions changed") do |app|
            app.chmod_octet(args[1])
        end
    end

    rename_desc = <<-EOT.unindent
        Renames the marketplace app
    EOT

    command :rename, rename_desc, :appid, :name do
        helper.perform_action(args[0], options, "renamed") do |o|
            o.rename(args[1])
        end
    end

    list_desc = <<-EOT.unindent
        Lists marketplace apps
    EOT

    command :list, list_desc, [:filterflag, nil], :options=>list_options do
        helper.list_pool(options, false, args[0])
    end

    show_desc = <<-EOT.unindent
        Shows information for the given marketplace app
    EOT

    command :show, show_desc, :appid, :options=>OpenNebulaHelper::XML do
        helper.show_resource(args[0], options)
    end

    enable_desc = <<-EOT.unindent
        Enables the marketplace app
    EOT

    command :enable, enable_desc, [:range, :appid_list] do
        helper.perform_actions(args[0], options, "enabled") do |obj|
            obj.enable
        end
    end

    disable_desc = <<-EOT.unindent
        Disables the marketplace app. A disabled marketplace app cannot be
        exported to a cloud
    EOT

    command :disable, disable_desc, [:range, :appid_list] do
        helper.perform_actions(args[0], options, "disabled") do |obj|
            obj.disable
        end
    end

    lock_desc = <<-EOT.unindent
        Locks a VM with differents levels for lock any actions with this VM, show and
        monitoring never will be locked.
        Valid states are: All.
        Levels:
        [Use]: locks Admin, Manage and Use actions.
        [Manage]: locks Manage and Use actions.
        [Admin]: locks only Admin actions.
    EOT

    command :lock, lock_desc, :appid,
        :options => [USE, MANAGE, ADMIN, ALL] do
        helper.perform_action(args[0],options,"MarketPlaceApp locked") do |app|
            if !options[:use].nil?
                level = 1
            elsif !options[:manage].nil?
                level = 2
            elsif !options[:admin].nil?
                level = 3
            elsif !options[:all].nil?
                level = 4
            else
                level = 1
            end
            app.lock(level)
        end
    end

    unlock_desc = <<-EOT.unindent
        Unlocks a VM for unlock any actions with this VM.
        Valid states are: All.
    EOT

    command :unlock, unlock_desc, :vmid do
        helper.perform_action(args[0],options,"MarketPlaceApp unlocked") do |app|
            app.unlock
        end
    end
end
