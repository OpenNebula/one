#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby'
    GEMS_LOCATION     = '/usr/share/one/gems'
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     = ONE_LOCATION + '/share/gems'
end

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << RUBY_LIB_LOCATION + '/cli'

require 'command_parser'
require 'one_helper/onevntemplate_helper'
require 'one_helper/onevnet_helper'

CommandParser::CmdParser.new(ARGV) do
    usage '`onevntemplate` <command> [<args>] [<options>]'
    version OpenNebulaHelper::ONE_VERSION

    helper = OneVNTemplateHelper.new

    before_proc do
        helper.set_client(options)
    end

    USE = {
        :name => 'use',
        :large => '--use',
        :description => 'lock use actions'
    }

    MANAGE = {
        :name => 'manage',
        :large => '--manage',
        :description => 'lock manage actions'
    }

    ADMIN = {
        :name => 'admin',
        :large => '--admin',
        :description => 'lock admin actions'
    }

    ALL = {
        :name => 'all',
        :large => '--all',
        :description => 'lock all actions'
    }

    PREFIX = {
        :name => 'prefix',
        :large => '--prefix prefix',
        :description => 'Prefix to autogenerate name, e.g: 001, 01',
        :format => String

    }

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS + OpenNebulaHelper::CLIENT_OPTIONS

    list_options  = CLIHelper::OPTIONS
    list_options += OpenNebulaHelper::FORMAT
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    instantiate_options = [
        OneVNTemplateHelper::VN_NAME,
        OneVNTemplateHelper::MULTIPLE,
        OneVNTemplateHelper::EXTENDED,
        OpenNebulaHelper::AS_USER,
        OpenNebulaHelper::AS_GROUP,
        PREFIX
    ]

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :groupid, OpenNebulaHelper.rname_to_id_desc('GROUP') do |arg|
        OpenNebulaHelper.rname_to_id(arg, 'GROUP')
    end

    set :format, :userid, OpenNebulaHelper.rname_to_id_desc('USER') do |arg|
        OpenNebulaHelper.rname_to_id(arg, 'USER')
    end

    set :format, :templateid, OneVNTemplateHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :templateid_list, OneVNTemplateHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneVNTemplateHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new Virtual Network Template from the given description

        Examples:
          - using a Virtual Network Template description file:

            onevntemplate create vn_description.tmpl

    EOT

    command :create, create_desc, [:file, nil], :options =>
            [OpenNebulaHelper::DRY] do
        helper.create_resource(options) do |tmpl|
            begin
                if args[0]
                    template = File.read(args[0])
                end

                if options[:dry]
                    puts template
                    exit 0
                else
                    tmpl.allocate(template)
                end
            rescue StandardError => e
                STDERR.puts e.message
                exit(-1)
            end
        end
    end

    clone_desc = <<-EOT.unindent
        Creates a new VN Template from an existing one
    EOT

    command :clone, clone_desc, :templateid, :name do
        helper.perform_action(args[0], options, 'cloned') do |t|
            res = t.clone(args[1])

            if !OpenNebula.is_error?(res)
                puts "ID: #{res}"
            else
                puts res.message
            end
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given VN Template
    EOT

    command :delete, delete_desc, [:range, :templateid_list] do
        helper.perform_actions(args[0], options, 'deleted') do |t|
            t.delete
        end
    end

    instantiate_desc = <<-EOT.unindent
        Creates a new VN instance from the given VN Template. This VN can be
        managed with the 'onevnet' command.

        The source Template can be modified adding or replacing attributes with
        the optional file argument, or with the options.
    EOT

    command :instantiate, instantiate_desc, :templateid, [:file, nil],
            :options => instantiate_options + OneVNetHelper::ADDAR_OPTIONS do
        exit_code = 0

        number = options[:multiple] || 1

        number.times do |i|
            exit_code = helper.perform_action(
                args[0],
                options,
                'instantiated'
            ) do |t|
                name   = options[:name]
                prefix = options[:prefix]
                c_i    = nil
                p      = nil

                if prefix && name
                    # Get leading zeros
                    p = prefix.scan(/^0+/)[0]

                    # Get current index
                    c_i = prefix.gsub(p, '') if p

                    # Convert it to Integer to check if we can use it
                    begin
                        c_i  = Integer(c_i)
                        name = name.gsub('%i', "#{p}#{c_i + index}")
                    rescue StandardError
                    end
                elsif name
                    name = name.gsub('%i', i.to_s)
                end

                extra_template = ''
                rc = t.info

                if OpenNebula.is_error?(rc)
                    STDERR.puts rc.message
                    exit(-1)
                end

                if args[1]
                    extra_template = File.read(args[1])
                else
                    res = OpenNebulaHelper.create_template(options, t)

                    if res.first != 0
                        STDERR.puts res.last
                        next -1
                    end

                    extra_template = res.last

                    if OneVNetHelper.add_ar_options_used?(options)
                        extra_template << OpenNebulaHelper.create_ar(options)
                    end
                end

                if c_i
                    extra_template.gsub!('%i', "#{p}#{c_i + index}")
                end

                res = t.instantiate(name, extra_template)

                if !OpenNebula.is_error?(res)
                    puts "VN ID: #{res}"
                end

                res
            end

            break if exit_code == -1
        end

        exit_code
    end

    chgrp_desc = <<-EOT.unindent
        Changes the VN Template group
    EOT

    command :chgrp, chgrp_desc, [:range, :templateid_list], :groupid do
        helper.perform_actions(args[0], options, 'Group changed') do |t|
            t.chown(-1, args[1].to_i)
        end
    end

    chown_desc = <<-EOT.unindent
        Changes the VN Template owner and group
    EOT

    command :chown, chown_desc, [:range, :templateid_list], :userid,
            [:groupid, nil] do
        args[2].nil? ? gid = -1 : gid = args[2].to_i
        helper.perform_actions(args[0], options, 'Owner/Group changed') do |t|
            t.chown(args[1].to_i, gid)
        end
    end

    chmod_desc = <<-EOT.unindent
        Changes the VN Template permissions
    EOT

    command :chmod, chmod_desc, [:range, :templateid_list], :octet do
        recursive = (options[:recursive] == true)

        helper.perform_actions(args[0], options, 'Permissions changed') do |t|
            t.chmod_octet(OpenNebulaHelper.to_octet(args[1]), recursive)
        end
    end

    update_desc = <<-EOT.unindent
        Update the VN template contents. If a path is not provided the editor will
        be launched to modify the current content.
    EOT

    command :update, update_desc, :templateid, [:file, nil],
            :options => OpenNebulaHelper::APPEND do
        helper.perform_action(args[0], options, 'modified') do |obj|
            if options[:append]
                str = OpenNebulaHelper.append_template(args[0], obj, args[1])
            else
                str = OpenNebulaHelper.update_template(args[0], obj, args[1])
            end

            helper.set_client(options)
            obj = helper.retrieve_resource(obj.id)

            obj.update(str, options[:append])
        end
    end

    list_desc = <<-EOT.unindent
        Lists VN Templates in the pool
    EOT

    rename_desc = <<-EOT.unindent
        Renames the VN Template
    EOT

    command :rename, rename_desc, :templateid, :name do
        helper.perform_action(args[0], options, 'renamed') do |o|
            o.rename(args[1])
        end
    end

    command :list, list_desc, [:filterflag, nil], :options => list_options do
        helper.list_pool(options, false, args[0])
    end

    show_desc = <<-EOT.unindent
        Shows information for the given VN Template
    EOT

    command :show, show_desc, :templateid,
            :options => [OpenNebulaHelper::FORMAT,
                         OneTemplateHelper::EXTENDED] do
        helper.show_resource(args[0], options)
    end

    top_desc = <<-EOT.unindent
        Lists Templates continuously
    EOT

    command :top, top_desc, [:filterflag, nil], :options => list_options do
        helper.list_pool(options, true, args[0])
    end

    lock_desc = <<-EOT.unindent
        Locks a VN Template to prevent certain actions defined by different levels.
        The show action will never be locked.
        Valid states are: All.
        Levels:
        [Use]: locks Admin, Manage and Use actions.
        [Manage]: locks Manage and Use actions.
        [Admin]: locks only Admin actions.
    EOT

    command :lock, lock_desc, [:range, :templateid_list],
            :options => [USE, MANAGE, ADMIN, ALL] do
        helper.perform_actions(args[0], options, 'VN Template locked') do |t|
            if !options[:use].nil?
                level = 1
            elsif !options[:manage].nil?
                level = 2
            elsif !options[:admin].nil?
                level = 3
            elsif !options[:all].nil?
                level = 4
            else
                level = 1
            end
            t.lock(level)
        end
    end

    unlock_desc = <<-EOT.unindent
        Unlocks a VN Template.
        Valid states are: All.
    EOT

    command :unlock, unlock_desc, [:range, :templateid_list] do
        helper.perform_actions(args[0], options, 'VN Template unlocked') do |t|
            t.unlock
        end
    end
end
