#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby'
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby'
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << RUBY_LIB_LOCATION + '/cli'

require 'command_parser'
require 'one_helper/onegroup_helper'

CommandParser::CmdParser.new(ARGV) do
    usage '`onegroup` <command> [<args>] [<options>]'
    version OpenNebulaHelper::ONE_VERSION

    helper = OneGroupHelper.new

    before_proc do
        helper.set_client(options)
    end

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS + OpenNebulaHelper::CLIENT_OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :groupid, OneGroupHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :groupid_list, OneGroupHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :userid, OpenNebulaHelper.rname_to_id_desc('USER') do |arg|
        OpenNebulaHelper.rname_to_id(arg, 'USER')
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new Group. A group name can be passed as the only argument,
        or via command line arguments

        Examples:

          - create a group with an admin user and allow group users
            to only create new templates and VMs

            onegroup create --name groupA
                            --admin_user admin_userA --admin_password somestr
                            --resources TEMPLATE+VM

    EOT

    command :create, create_desc, [:group_name, nil], :options =>
            OpenNebulaHelper::GROUP_OPTIONS do

        if options && options[:admin_user]
            if !options[:admin_password]
                STDERR.puts 'Admin user needs password'
                next -1
            end

            admin_user = {}
            admin_user[:name]       = options[:admin_user]
            admin_user[:password]   = options[:admin_password]
            if options[:admin_driver]
                admin_user[:auth_driver] = options[:admin_driver]
            end

            options[:group_admin] = admin_user
        end

        if args[0]
            options[:name] = args[0]
            helper.create_complete_resource(options)
        elsif options[:name]
            helper.create_complete_resource(options)
        else
            STDERR.puts 'Please use either a group name or command arguments.'\
                        ' Run onegroup create -h for more information'
            next -1
        end
    end

    update_desc = <<-EOT.unindent
        Update the template contents. If a path is not provided the editor will
        be launched to modify the current content.
    EOT

    command :update, update_desc, :groupid, [:file, nil],
            :options => OpenNebulaHelper::APPEND do
        helper.perform_action(args[0], options, 'modified') do |obj|
            if options[:append]
                str = OpenNebulaHelper.append_template(args[0], obj, args[1])
            else
                str = OpenNebulaHelper.update_template(args[0], obj, args[1])
            end

            helper.set_client(options)
            obj = helper.retrieve_resource(obj.id)

            obj.update(str, options[:append])
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given Group
    EOT

    command :delete, delete_desc, [:range, :groupid_list] do
        helper.perform_actions(args[0], options, 'deleted') do |obj|
            obj.delete
        end
    end

    list_desc = <<-EOT.unindent
        Lists Groups in the pool
    EOT

    command :list, list_desc, :options => list_options do
        helper.list_pool(options)
    end

    show_desc = <<-EOT.unindent
        Shows information for the given Group
    EOT

    command :show, show_desc, [:groupid, nil],
            :options => OpenNebulaHelper::XML do
        group = args[0] || OpenNebula::Group::SELF
        helper.show_resource(group, options)
    end

    add_admin_desc = <<-EOT.unindent
        Adds a User to the Group administrators set
    EOT

    command :addadmin, add_admin_desc, [:range, :groupid_list], :userid do
        helper.perform_actions(args[0], options, 'admin added') do |obj|
            obj.add_admin(args[1].to_i)
        end
    end

    del_admin_desc = <<-EOT.unindent
        Removes a User from the Group administrators set
    EOT

    command :deladmin, del_admin_desc, [:range, :groupid_list], :userid do
        helper.perform_actions(args[0], options, 'admin deleted') do |obj|
            obj.del_admin(args[1].to_i)
        end
    end

    quota_desc = <<-EOT.unindent
        Set the quota limits for the group. If a path is not provided the
        editor will be launched to modify the current quotas.
    EOT

    command :quota, quota_desc, :groupid, [:file, nil] do
        helper.perform_action(args[0], options, 'modified') do |group|
            rc = group.info

            if OpenNebula.is_error?(rc)
                puts rc.message
                exit(-1)
            end

            str = OneQuotaHelper.set_quota(group, args[1])
            rc  = group.set_quota(str)

            if OpenNebula.is_error?(rc)
                puts rc.message
                exit(-1)
            end
        end
    end

    batchquota_desc = <<-EOT.unindent
        Sets the quota limits in batch for various groups. If a path is not
        provided the editor will be launched to create new quotas.
    EOT

    command :batchquota, batchquota_desc, [:range, :groupid_list],
            [:file, nil] do
        batch_str = OneQuotaHelper.get_batch_quota(args[1])

        helper.perform_actions(args[0], options, 'modified') do |group|
            str = OneQuotaHelper.merge_quota(group, batch_str)

            if OpenNebula.is_error?(str)
                str
            else
                rc = group.set_quota(str)
                rc
            end
        end
    end

    defaultquota_desc = <<-EOT.unindent
        Sets the default quota limits for the groups. If a path is not provided
        the editor will be launched to modify the current default quotas.
    EOT

    command :defaultquota, defaultquota_desc, [:file, nil] do
        system = System.new(OneGroupHelper.get_client(options))

        default_quotas = system.get_group_quotas

        if OpenNebula.is_error?(default_quotas)
            puts default_quotas.message
            exit(-1)
        end

        str = OneQuotaHelper.set_quota(default_quotas, args[0], true)

        rc  = system.set_group_quotas(str)

        if OpenNebula.is_error?(rc)
            puts rc.message
            exit(-1)
        end

        exit 0
    end
end
