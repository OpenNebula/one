#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/onetemplate_helper'
require 'one_helper/onevm_helper'

addons = Dir["/var/lib/one/addons/onetemplate-*.rb"]

cmd=CommandParser::CmdParser.new(ARGV, addons) do
    usage "`onetemplate` <command> [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneTemplateHelper.new

    before_proc do
        helper.set_client(options)
    end

    USE={
        :name  => "use",
        :large => "--use",
        :description => "lock use actions"
    }

    MANAGE={
        :name  => "manage",
        :large => "--manage",
        :description => "lock manage actions"
    }

    ADMIN={
        :name  => "admin",
        :large => "--admin",
        :description => "lock admin actions"
    }

    ALL={
        :name  => "all",
        :large => "--all",
        :description => "lock all actions"
    }

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS+OpenNebulaHelper::CLIENT_OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    instantiate_options = [
        OneTemplateHelper::VM_NAME,
        OneTemplateHelper::MULTIPLE,
        OneTemplateHelper::USERDATA,
        OneVMHelper::HOLD,
        OneTemplateHelper::PERSISTENT,
    ]

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :groupid, OpenNebulaHelper.rname_to_id_desc("GROUP") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "GROUP")
    end

    set :format, :userid, OpenNebulaHelper.rname_to_id_desc("USER") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "USER")
    end

    set :format, :templateid, OneTemplateHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :templateid_list, OneTemplateHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :filterflag, OneTemplateHelper.filterflag_to_i_desc do |arg|
        helper.filterflag_to_i(arg)
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new VM Template from the given description

        Examples:
          - using a VM Template description file:

            onetemplate create vm_description.tmpl

          - new VM Template named "arch vm" with a disk and a nic:

            onetemplate create --name "arch vm" --memory 128 --cpu 1 \\
                               --disk arch --network private_lan

          - using two disks:

            onetemplate create --name "test vm" --memory 128 --cpu 1 \\
                               --disk arch,data

    EOT

    command :create, create_desc, [:file, nil], :options =>
            [OneTemplateHelper::VM_NAME]+OpenNebulaHelper::TEMPLATE_OPTIONS+
            [OpenNebulaHelper::DRY] do

        if args[0] && OpenNebulaHelper.create_template_options_used?(options)
            STDERR.puts "You can not use both template file and template"<<
                " creation options."
            next -1
        end

        helper.create_resource(options) do |tmpl|
            begin
                if args[0]
                    template = File.read(args[0])
                else
                    res = OpenNebulaHelper.create_template(options)

                    if res.first != 0
                        STDERR.puts res.last
                        next -1
                    end

                    template = res.last
                end

                if options[:dry]
                    puts template
                    exit 0
                else
                    tmpl.allocate(template)
                end
            rescue => e
                STDERR.puts e.messsage
                exit -1
            end
        end
    end

    clone_desc = <<-EOT.unindent
        Creates a new Template from an existing one
    EOT

    command :clone, clone_desc, :templateid, :name,
            :options =>OneTemplateHelper::RECURSIVE do

        recursive = (options[:recursive] == true)

        helper.perform_action(args[0],options,"cloned") do |t|
            res = t.clone(args[1], recursive)

            if !OpenNebula.is_error?(res)
                puts "ID: #{res}"
            else
                puts res.message
            end
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given Template
    EOT

    command :delete, delete_desc, [:range, :templateid_list],
            :options =>OneTemplateHelper::RECURSIVE do

        recursive = (options[:recursive] == true)

        helper.perform_actions(args[0],options,"deleted") do |t|
            t.delete(recursive)
        end
    end

    instantiate_desc = <<-EOT.unindent
        Creates a new VM instance from the given Template. This VM can be
        managed with the 'onevm' command.

        The source Template can be modified adding or replacing attributes with
        the optional file argument, or with the options.
    EOT

    command :instantiate, instantiate_desc, :templateid, [:file, nil],
            :options=>instantiate_options+OpenNebulaHelper::TEMPLATE_OPTIONS do
        exit_code=0

        if args[1] && OpenNebulaHelper.create_template_options_used?(options)
            STDERR.puts "You cannot use both template file and template"<<
                " creation options."
            next -1
        end

        number = options[:multiple] || 1
        user_inputs = nil

        number.times do |i|
            exit_code=helper.perform_action(args[0], options,
                                            "instantiated") do |t|
                name = options[:name]
                name = name.gsub("%i",i.to_s) if name

                on_hold = options[:hold] != nil

                extra_template = ""
                rc = t.info

                if OpenNebula.is_error?(rc)
                    STDERR.puts rc.message
                    exit(-1)
                end

                if args[1]
                    extra_template = File.read(args[1])
                else
                    res = OpenNebulaHelper.create_template(options, t)

                    if res.first != 0
                        STDERR.puts res.last
                        next -1
                    end

                    extra_template = res.last
                end

                user_inputs = OneTemplateHelper.get_user_inputs(t.to_hash) unless user_inputs

                extra_template << "\n" << user_inputs

                persistent = options[:persistent] != nil

                res = t.instantiate(name, on_hold, extra_template, persistent)

                if !OpenNebula.is_error?(res)
                    puts "VM ID: #{res}"
                end

                res
            end

            break if exit_code==-1
        end

        exit_code
    end

    chgrp_desc = <<-EOT.unindent
        Changes the Template group
    EOT

    command :chgrp, chgrp_desc,[:range, :templateid_list], :groupid do
        helper.perform_actions(args[0],options,"Group changed") do |t|
            t.chown(-1, args[1].to_i)
        end
    end

    chown_desc = <<-EOT.unindent
        Changes the Template owner and group
    EOT

    command :chown, chown_desc, [:range, :templateid_list], :userid,
            [:groupid,nil] do
        gid = args[2].nil? ? -1 : args[2].to_i
        helper.perform_actions(args[0],options,"Owner/Group changed") do |t|
            t.chown(args[1].to_i, gid)
        end
    end

    chmod_desc = <<-EOT.unindent
        Changes the Template permissions
    EOT

    command :chmod, chmod_desc, [:range, :templateid_list], :octet,
            :options =>OneTemplateHelper::RECURSIVE do

        recursive = (options[:recursive] == true)

        helper.perform_actions(args[0],options, "Permissions changed") do |t|
            t.chmod_octet(args[1], recursive)
        end
    end

    update_desc = <<-EOT.unindent
        Update the template contents. If a path is not provided the editor will
        be launched to modify the current content.
    EOT

    command :update, update_desc, :templateid, [:file, nil],
    :options=>OpenNebulaHelper::APPEND do
        helper.perform_action(args[0],options,"modified") do |obj|
            if options[:append]
                str = OpenNebulaHelper.append_template(args[0], obj, args[1])
            else
                str = OpenNebulaHelper.update_template(args[0], obj, args[1])
            end

            helper.set_client(options)
            obj = helper.retrieve_resource(obj.id)

            obj.update(str, options[:append])
        end
    end

    list_desc = <<-EOT.unindent
        Lists Templates in the pool
    EOT

    rename_desc = <<-EOT.unindent
        Renames the Template
    EOT

    command :rename, rename_desc, :templateid, :name do
        helper.perform_action(args[0],options,"renamed") do |o|
            o.rename(args[1])
        end
    end

    command :list, list_desc, [:filterflag, nil], :options=>list_options do
        helper.list_pool(options, false, args[0])
    end

    show_desc = <<-EOT.unindent
        Shows information for the given Template
    EOT

    command :show, show_desc, :templateid,
        :options=>[OpenNebulaHelper::XML,OneTemplateHelper::EXTENDED] do

        helper.show_resource(args[0],options)
    end

    top_desc = <<-EOT.unindent
        Lists Templates continuously
    EOT

    command :top, top_desc, [:filterflag, nil], :options=>list_options do
        helper.list_pool(options, true, args[0])
    end

    lock_desc = <<-EOT.unindent
        Locks a VM with differents levels for lock any actions with this VM, show and
        monitoring never will be locked.
        Valid states are: All.
        Levels:
        [Use]: locks Admin, Manage and Use actions.
        [Manage]: locks Manage and Use actions.
        [Admin]: locks only Admin actions.
    EOT

    command :lock, lock_desc, :templateid,
        :options => [USE, MANAGE, ADMIN, ALL] do
        helper.perform_action(args[0],options,"Template locked") do |t|
            if !options[:use].nil?
                level = 1
            elsif !options[:manage].nil?
                level = 2
            elsif !options[:admin].nil?
                level = 3
            elsif !options[:all].nil?
                level = 4
            else
                level = 1
            end
            t.lock(level)
        end
    end

    unlock_desc = <<-EOT.unindent
        Unlocks a VM for unlock any actions with this VM.
        Valid states are: All.
    EOT

    command :unlock, unlock_desc, :templateid do
        helper.perform_action(args[0],options,"Template unlocked") do |t|
            t.unlock
        end
    end
end
