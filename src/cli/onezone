#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/onezone_helper'

addons = Dir["/var/lib/one/addons/onezone-*.rb"]

cmd=CommandParser::CmdParser.new(ARGV, addons) do
    usage "`onezone` <command> [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneZoneHelper.new

    before_proc do
        helper.set_client(options)
    end

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS+OpenNebulaHelper::CLIENT_OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :zoneid, OneZoneHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :zoneid_list, OneZoneHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new Zone
    EOT

    command :create, create_desc, :file do
        helper.create_resource(options) do |zone|
            begin
                template = File.read(args[0])
                zone.allocate(template)
            rescue => e
                STDERR.puts e.message
                exit -1
            end
        end
    end

    rename_desc = <<-EOT.unindent
        Renames the Zone
    EOT

    command :rename, rename_desc, :zoneid, :name do
        helper.perform_action(args[0],options,"renamed") do |o|
            o.rename(args[1])
        end
    end

    addserver_desc = <<-EOT.unindent
        Add an OpenNebula server to this zone.
    EOT

    command :"server-add", addserver_desc, :zoneid, :options =>
        [ OneZoneHelper::SERVER_NAME, OneZoneHelper::SERVER_ENDPOINT] do

        if options[:server_name].nil? || options[:server_rpc].nil?
            STDERR.puts "To add a server set:"
            STDERR.puts "\t-n <server name>"
            STDERR.puts "\t-r <RPC endpoint>"
            exit -1
        end

        template = <<-EOT
            SERVER = [
              NAME="#{options[:server_name]}",
              ENDPOINT="#{options[:server_rpc]}"
            ]
        EOT

        helper.perform_action(args[0], options, "server added") do |o|
            o.add_servers(template)
        end

    end

    delserver_desc = <<-EOT.unindent
        Delete an OpenNebula server from this zone.
    EOT

    command :"server-del", delserver_desc, :zoneid, :serverid do
        helper.perform_action(args[0], options, "server deleted") do |o|
            o.delete_servers(args[1].to_i)
        end

    end
    update_desc = <<-EOT.unindent
        Update the template contents. If a path is not provided the editor will
        be launched to modify the current content.
    EOT

    command :update, update_desc, :zoneid, [:file, nil],
    :options=>OpenNebulaHelper::APPEND do
        helper.perform_action(args[0],options,"modified") do |obj|
            if options[:append]
                str = OpenNebulaHelper.append_template(args[0], obj, args[1])
            else
                str = OpenNebulaHelper.update_template(args[0], obj, args[1])
            end

            helper.set_client(options)
            obj = helper.retrieve_resource(obj.id)

            obj.update(str, options[:append])
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given Zone
    EOT

    command :delete, delete_desc, [:range, :zoneid_list] do
        helper.perform_actions(args[0],options,"deleted") do |obj|
            obj.delete
        end
    end

    list_desc = <<-EOT.unindent
        Lists Zones in the pool
    EOT

    command :list, list_desc, :options=>list_options do
        helper.list_pool(options)
    end

    show_desc = <<-EOT.unindent
        Shows information for the given Zone
    EOT

    command :show, show_desc,:zoneid, :options=>OpenNebulaHelper::XML do
        helper.show_resource(args[0],options)
    end

    set_desc = <<-EOT.unindent
        Set shell session access point for the CLI to the given Zone
    EOT

    command :set, set_desc,:zoneid do
        helper.set_zone(args[0])
    end
end
