#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby'
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby'
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << RUBY_LIB_LOCATION + '/cli'

require 'command_parser'
require 'one_helper/onedatastore_helper'
require 'one_helper/onecluster_helper'

CommandParser::CmdParser.new(ARGV) do
    usage '`onedatastore` <command> [<args>] [<options>]'
    version OpenNebulaHelper::ONE_VERSION

    helper = OneDatastoreHelper.new

    before_proc do
        helper.set_client(options)
    end

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS + OpenNebulaHelper::CLIENT_OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :datastoreid, OneDatastoreHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :datastoreid_list, OneDatastoreHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :clusterid,
        OpenNebulaHelper.rname_to_id_desc('CLUSTER') do |arg|
        OpenNebulaHelper.rname_to_id(arg, 'CLUSTER')
    end

    set :format, :groupid, OpenNebulaHelper.rname_to_id_desc('GROUP') do |arg|
        OpenNebulaHelper.rname_to_id(arg, 'GROUP')
    end

    set :format, :userid, OpenNebulaHelper.rname_to_id_desc('USER') do |arg|
        OpenNebulaHelper.rname_to_id(arg, 'USER')
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new Datastore from the given template file
    EOT

    command :create, create_desc, :file,
            :options => [OneClusterHelper::CLUSTER] do

        cid = options[:cluster] || ClusterPool::NONE_CLUSTER_ID

        helper.create_resource(options) do |datastore|
            begin
                template = File.read(args[0])
                datastore.allocate(template, cid)
            rescue StandardError => e
                STDERR.puts e.message
                exit(-1)
            end
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given Datastore
    EOT

    command :delete, delete_desc, [:range, :datastoreid_list] do
        helper.perform_actions(args[0], options, 'deleted') do |obj|
            obj.delete
        end
    end

    chgrp_desc = <<-EOT.unindent
        Changes the Datastore group
    EOT

    command :chgrp, chgrp_desc, [:range, :datastoreid_list], :groupid do
        helper.perform_actions(args[0], options, 'Group changed') do |obj|
            obj.chown(-1, args[1].to_i)
        end
    end

    chown_desc = <<-EOT.unindent
        Changes the Datastore owner and group
    EOT

    command :chown, chown_desc, [:range, :datastoreid_list], :userid,
            [:groupid, nil] do
        args[2].nil? ? gid = -1 : gid = args[2].to_i
        helper.perform_actions(args[0], options, 'Owner/Group changed') do |obj|
            obj.chown(args[1].to_i, gid)
        end
    end

    chmod_desc = <<-EOT.unindent
        Changes the Datastore permissions
    EOT

    command :chmod, chmod_desc, [:range, :datastoreid_list], :octet do
        helper.perform_actions(args[0], options, 'Permissions changed') do |obj|
            obj.chmod_octet(args[1])
        end
    end

    list_desc = <<-EOT.unindent
        Lists Datastores in the pool
    EOT

    command :list, list_desc, :options => list_options do
        helper.list_pool(options)
    end

    show_desc = <<-EOT.unindent
        Shows information for the given Datastore
    EOT

    command :show, show_desc, :datastoreid, :options => OpenNebulaHelper::XML do
        helper.show_resource(args[0], options)
    end

    update_desc = <<-EOT.unindent
        Update the template contents. If a path is not provided the editor will
        be launched to modify the current content.
    EOT

    command :update, update_desc, :datastoreid, [:file, nil],
            :options => OpenNebulaHelper::APPEND do
        helper.perform_action(args[0], options, 'modified') do |obj|
            if options[:append]
                str = OpenNebulaHelper.append_template(args[0], obj, args[1])
            else
                str = OpenNebulaHelper.update_template(args[0], obj, args[1])
            end

            helper.set_client(options)
            obj = helper.retrieve_resource(obj.id)

            obj.update(str, options[:append])
        end
    end

    rename_desc = <<-EOT.unindent
        Renames the Datastore
    EOT

    command :rename, rename_desc, :datastoreid, :name do
        helper.perform_action(args[0], options, 'renamed') do |o|
            o.rename(args[1])
        end
    end

    enable_desc = <<-EOT.unindent
        Enables the given Datastore. Only available for System Datastores
    EOT

    command :enable, enable_desc, [:range, :datastoreid_list] do
        helper.perform_actions(args[0], options, 'enabled') do |obj|
            obj.enable
        end
    end

    disable_desc = <<-EOT.unindent
        Disables the given Datastore. Only available for System Datastores
    EOT

    command :disable, disable_desc, [:range, :datastoreid_list] do
        helper.perform_actions(args[0], options, 'disabled') do |obj|
            obj.disable
        end
    end
end
