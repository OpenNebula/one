#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'one_helper/onevdc_helper'

addons = Dir["/var/lib/one/addons/onevdc-*.rb"]

cmd=CommandParser::CmdParser.new(ARGV, addons) do
    usage "`onevdc` <command> [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    helper = OneVdcHelper.new

    before_proc do
        helper.set_client(options)
    end

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS+OpenNebulaHelper::CLIENT_OPTIONS

    list_options = CLIHelper::OPTIONS
    list_options << OpenNebulaHelper::XML
    list_options << OpenNebulaHelper::NUMERIC
    list_options << OpenNebulaHelper::DESCRIBE

    ########################################################################
    # Formatters for arguments
    ########################################################################
    set :format, :vdcid, OneVdcHelper.to_id_desc do |arg|
        helper.to_id(arg)
    end

    set :format, :vdcid_list, OneVdcHelper.list_to_id_desc do |arg|
        helper.list_to_id(arg)
    end

    set :format, :groupid, OpenNebulaHelper.rname_to_id_desc("GROUP") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "GROUP")
    end

    set :format, :zoneid, OpenNebulaHelper.rname_to_id_desc("ZONE") do |arg|
        OpenNebulaHelper.rname_to_id(arg, "ZONE")
    end

    set :format, :clusterid,
        "#{OpenNebulaHelper.rname_to_id_desc('CLUSTER')}. Can be set to ALL" do |arg|

        if !arg.nil? and arg.class != Fixnum and arg.upcase == "ALL"
            [0, Vdc::ALL_RESOURCES]
        else
            OpenNebulaHelper.rname_to_id(arg, "CLUSTER")
        end
    end

    set :format, :hostid,
        "#{OpenNebulaHelper.rname_to_id_desc('HOST')}. Can be set to ALL" do |arg|

        if !arg.nil? and arg.class != Fixnum and arg.upcase == "ALL"
            [0, Vdc::ALL_RESOURCES]
        else
            OpenNebulaHelper.rname_to_id(arg, "HOST")
        end
    end

    set :format, :datastoreid,
        "#{OpenNebulaHelper.rname_to_id_desc('DATASTORE')}. Can be set to ALL" do |arg|

        if !arg.nil? and arg.class != Fixnum and arg.upcase == "ALL"
            [0, Vdc::ALL_RESOURCES]
        else
            OpenNebulaHelper.rname_to_id(arg, "DATASTORE")
        end
    end

    set :format, :vnetid,
        "#{OpenNebulaHelper.rname_to_id_desc('VNET')}. Can be set to ALL" do |arg|

        if !arg.nil? and arg.class != Fixnum and arg.upcase == "ALL"
            [0, Vdc::ALL_RESOURCES]
        else
            OpenNebulaHelper.rname_to_id(arg, "VNET")
        end
    end

    ########################################################################
    # Commands
    ########################################################################

    create_desc = <<-EOT.unindent
        Creates a new VDC
    EOT

    command :create, create_desc, :name do
        helper.create_resource(options) do |vdc|
            template = "NAME = \"#{args[0]}\""
            vdc.allocate(template)
        end
    end

    rename_desc = <<-EOT.unindent
        Renames the VDC
    EOT

    command :rename, rename_desc, :vdcid, :name do
        helper.perform_action(args[0],options,"renamed") do |o|
            o.rename(args[1])
        end
    end

    update_desc = <<-EOT.unindent
        Update the template contents. If a path is not provided the editor will
        be launched to modify the current content.
    EOT

    command :update, update_desc, :vdcid, [:file, nil],
    :options=>OpenNebulaHelper::APPEND do
        helper.perform_action(args[0],options,"modified") do |obj|
            if options[:append]
                str = OpenNebulaHelper.append_template(args[0], obj, args[1])
            else
                str = OpenNebulaHelper.update_template(args[0], obj, args[1])
            end

            helper.set_client(options)
            obj = helper.retrieve_resource(obj.id)

            obj.update(str, options[:append])
        end
    end

    delete_desc = <<-EOT.unindent
        Deletes the given VDC
    EOT

    command :delete, delete_desc, [:range, :vdcid_list] do
        helper.perform_actions(args[0],options,"deleted") do |obj|
            obj.delete
        end
    end

    add_group_desc = <<-EOT.unindent
        Adds a Group to the given VDC
    EOT

    command :addgroup, add_group_desc, [:range, :vdcid_list], :groupid do
        helper.perform_actions(args[0],options,"group added") do |obj|
            obj.add_group(args[1].to_i)
        end
    end

    del_group_desc = <<-EOT.unindent
        Deletes a Group from the given VDC
    EOT

    command :delgroup, del_group_desc, [:range, :vdcid_list], :groupid do
        helper.perform_actions(args[0],options,"group deleted") do |obj|
            obj.del_group(args[1].to_i)
        end
    end

    add_cluster_desc = <<-EOT.unindent
        Adds a Cluster (from a specific Zone) to the given VDC
    EOT

    command :addcluster, add_cluster_desc, [:range, :vdcid_list], :zoneid, :clusterid do
        helper.perform_actions(args[0],options,"cluster added") do |obj|
            obj.add_cluster(args[1].to_i, args[2].to_i)
        end
    end

    del_cluster_desc = <<-EOT.unindent
        Deletes a Cluster (from a specific Zone) from the given VDC
    EOT

    command :delcluster, del_cluster_desc, [:range, :vdcid_list], :zoneid, :clusterid do
        helper.perform_actions(args[0],options,"cluster deleted") do |obj|
            obj.del_cluster(args[1].to_i, args[2].to_i)
        end
    end

    add_host_desc = <<-EOT.unindent
        Adds a Host (from a specific Zone) to the given VDC
    EOT

    command :addhost, add_host_desc, [:range, :vdcid_list], :zoneid, :hostid do
        helper.perform_actions(args[0],options,"host added") do |obj|
            obj.add_host(args[1].to_i, args[2].to_i)
        end
    end

    del_host_desc = <<-EOT.unindent
        Deletes a Host (from a specific Zone) from the given VDC
    EOT

    command :delhost, del_host_desc, [:range, :vdcid_list], :zoneid, :hostid do
        helper.perform_actions(args[0],options,"host deleted") do |obj|
            obj.del_host(args[1].to_i, args[2].to_i)
        end
    end

    add_datastore_desc = <<-EOT.unindent
        Adds a Datastore (from a specific Zone) to the given VDC
    EOT

    command :adddatastore, add_datastore_desc, [:range, :vdcid_list], :zoneid, :datastoreid do
        helper.perform_actions(args[0],options,"datastore added") do |obj|
            obj.add_datastore(args[1].to_i, args[2].to_i)
        end
    end

    del_datastore_desc = <<-EOT.unindent
        Deletes a Datastore (from a specific Zone) from the given VDC
    EOT

    command :deldatastore, del_datastore_desc, [:range, :vdcid_list], :zoneid, :datastoreid do
        helper.perform_actions(args[0],options,"datastore deleted") do |obj|
            obj.del_datastore(args[1].to_i, args[2].to_i)
        end
    end

    add_vnet_desc = <<-EOT.unindent
        Adds a Virtual Network (from a specific Zone) to the given VDC
    EOT

    command :addvnet, add_vnet_desc, [:range, :vdcid_list], :zoneid, :vnetid do
        helper.perform_actions(args[0],options,"vnet added") do |obj|
            obj.add_vnet(args[1].to_i, args[2].to_i)
        end
    end

    del_vnet_desc = <<-EOT.unindent
        Deletes a Virtual Network (from a specific Zone) from the given VDC
    EOT

    command :delvnet, del_vnet_desc, [:range, :vdcid_list], :zoneid, :vnetid do
        helper.perform_actions(args[0],options,"vnet deleted") do |obj|
            obj.del_vnet(args[1].to_i, args[2].to_i)
        end
    end

    list_desc = <<-EOT.unindent
        Lists VDCs in the pool
    EOT

    command :list, list_desc, :options=>list_options do
        helper.list_pool(options)
    end

    show_desc = <<-EOT.unindent
        Shows information for the given VDC
    EOT

    command :show, show_desc,:vdcid, :options=>OpenNebulaHelper::XML do
        helper.show_resource(args[0],options)
    end
end
