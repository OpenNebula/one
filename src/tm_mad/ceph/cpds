#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# cpds host:remote_system_ds/disk.i fe:SOURCE snapid vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - snapid is the snapshot id. "-1" for none

SRC=$1
DST=$2
SNAP_ID=$3
VM_ID=$4
DS_ID=$5

#--------------------------------------------------------------------------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    LIB_LOCATION=/usr/lib/one
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    LIB_LOCATION=$ONE_LOCATION/lib
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../etc/datastore/ceph/ceph.conf
source ${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc

CEPH_UTILS=${DRIVER_PATH}/../../datastore/ceph/ceph_utils.sh

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------

SRC_PATH=`arg_path $SRC`
SRC_HOST=`arg_host $SRC`
RBD_SRC=`arg_path $SRC`

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$RBD_SRC" | $AWK -F. '{print $NF}')

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH \
                    /VM/DEPLOY_ID \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CEPH_USER \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CEPH_KEY \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CEPH_CONF \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/TYPE )

DEPLOY_ID="${XPATH_ELEMENTS[j++]}"
RBD_SRC="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"
CEPH_USER="${XPATH_ELEMENTS[j++]}"
CEPH_KEY="${XPATH_ELEMENTS[j++]}"
CEPH_CONF="${XPATH_ELEMENTS[j++]}"
TYPE="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DS_ID | $XPATH \
                    /DATASTORE/TEMPLATE/EC_POOL_NAME)

EC_POOL_NAME="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Copy Image back to the datastore
#-------------------------------------------------------------------------------

if [ "$CLONE" = "NO" ]; then
    RBD_DST="${RBD_SRC}"
else
    RBD_DST="${RBD_SRC}-${VM_ID}-${DISK_ID}"
fi

if [ -n "$CEPH_USER" ]; then
    RBD="$RBD --id ${CEPH_USER}"
fi

if [ -n "$CEPH_KEY" ]; then
    RBD="$RBD --keyfile ${CEPH_KEY}"
fi

if [ -n "$CEPH_CONF" ]; then
    RBD="$RBD --conf ${CEPH_CONF}"
fi

if [ "$RBD_FORMAT" = "2" ]; then
    FORMAT_OPT="--image-format 2"
fi

if [ -n "$EC_POOL_NAME" ]; then
    EC_POOL_OPT="--data-pool ${EC_POOL_NAME}"
fi

if [ "${TYPE}" = 'FILE' ]; then
    if [ "$SNAP_ID" != "-1" ]; then
        error_message "$script_name: Operation not supported on disk type ${TYPE} with snapshots"
        exit 1
    fi

    COPY_CMD=$(cat <<EOF
        if virsh -c $LIBVIRT_URI domfsfreeze $DEPLOY_ID ; then
            trap "virsh -c $LIBVIRT_URI domfsthaw $DEPLOY_ID" EXIT TERM INT HUP
        elif virsh -c $LIBVIRT_URI suspend $DEPLOY_ID; then
            trap "virsh -c $LIBVIRT_URI resume $DEPLOY_ID" EXIT TERM INT HUP
        else
            echo "Could not domfsfreeze or suspend domain" >&2
            exit 1
        fi

        $RBD import $FORMAT_OPT $SRC_PATH $DST
EOF
)
else
    COPY_CMD=$(cat <<EOF
        RBD="${RBD}"

        if [ "$SNAP_ID" != "-1" ]; then
            rbd_check_2 $RBD_DST

            RBD_DST=\$(rbd_find_snap $RBD_DST $SNAP_ID)

            if [ -z "\$RBD_DST" ]; then
                echo "Target RBD not found." >&2
                exit 1
            fi

            RBD_DST=\$RBD_DST@$SNAP_ID
        else
            RBD_DST=$RBD_DST
        fi

        $RBD ${EC_POOL_OPT} copy \$RBD_DST $DST
EOF
)
fi

ssh_exec_and_log_stdin "$SRC_HOST" "$COPY_CMD" "$CEPH_UTILS" \
                 "Error cloning $RBD_DST to $DST in $SRC_HOST"
