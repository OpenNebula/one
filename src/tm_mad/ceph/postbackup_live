#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2025, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #
# %%RUBYGEMS_SETUP_BEGIN%%
require 'load_opennebula_paths'
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION

require 'rexml/document'

require_relative '../lib/tm_action'
require_relative '../lib/datastore'

#-------------------------------------------------------------------------------
# BACKUP tm_mad host:remote_dir DISK_ID:...:DISK_ID deploy_id bjid vmid dsid
#-------------------------------------------------------------------------------
TransferManager::Datastore.load_env

vm_xml = STDIN.read

dir       = ARGV[0].split ':'
_disks    = ARGV[1].split ':'
_deployid = ARGV[2]
_bjid     = ARGV[3]
vmid      = ARGV[4]
_dsid     = ARGV[5]

rdir      = dir[1]

base_path = ENV['BACKUP_BASE_PATH']

bck_dir = if base_path
              "#{base_path}/#{vmid}/backup"
          else
              "#{rdir}/backup"
          end

xml_data = REXML::Document.new(vm_xml)
rhost    = xml_data.elements['VM/BACKUPS/BACKUP_CONFIG/LAST_BRIDGE']&.text || dir[0]

rm_script = "rm -rf #{bck_dir}"
rm_script << "; rm -rf #{base_path}/#{vmid}\n" if base_path

rc = TransferManager::Action.ssh('postbackup',
                                 :host => rhost,
                                 :cmds => rm_script,
                                 :nostdout => false,
                                 :nostderr => false)

if rc.code != 0
    STDERR.puts "Error cleaning backup temporal files: #{rc.stdout} #{rc.stderr}"
end

# Error is logged, tmp files will be removed in next backup, or VM termination
exit(0)
