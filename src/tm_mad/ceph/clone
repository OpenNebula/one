#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# clone fe:SOURCE host:remote_system_ds/disk.i size
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host

SRC=$1
DST=$2
VM_ID=$3
DS_ID=$4

#--------------------------------------------------------------------------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    LIB_LOCATION=/usr/lib/one
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    LIB_LOCATION=$ONE_LOCATION/lib
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../etc/datastore/ceph/ceph.conf

CEPH_UTILS=${DRIVER_PATH}/../../datastore/ceph/ceph_utils.sh

#-------------------------------------------------------------------------------
# Compute the destination image name
#-------------------------------------------------------------------------------

DST_HOST=`arg_host $DST`

SRC_PATH=`arg_path $SRC`
DST_PATH=`arg_path $DST`

DST_DIR=`dirname $DST_PATH`

DISK_ID=$(echo $DST|awk -F. '{print $NF}')
RBD_DST="${SRC_PATH}-${VM_ID}-${DISK_ID}"
DST_DS_ID=$(echo $DST | sed s#//*#/#g | awk -F/ '{print $(NF-2)}')

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH  \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CEPH_USER \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CEPH_KEY \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CEPH_CONF \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SIZE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/ORIGINAL_SIZE )

CEPH_USER="${XPATH_ELEMENTS[j++]}"
CEPH_KEY="${XPATH_ELEMENTS[j++]}"
CEPH_CONF="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"
ORIGINAL_SIZE="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Get Datastore information
#-------------------------------------------------------------------------------

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DST_DS_ID | $XPATH \
                    /DATASTORE/TEMPLATE/EC_POOL_NAME)

EC_POOL_NAME="${XPATH_ELEMENTS[j++]}"

disable_local_monitoring $DST_HOST $DST_DIR

#-------------------------------------------------------------------------------
# Clone the image and create @snap if it does not exists
#-------------------------------------------------------------------------------

if [ -n "$CEPH_USER" ]; then
    RBD="$RBD --id ${CEPH_USER}"
fi

if [ -n "$CEPH_KEY" ]; then
    RBD="$RBD --keyfile ${CEPH_KEY}"
fi

if [ -n "$CEPH_CONF" ]; then
    RBD="$RBD --conf ${CEPH_CONF}"
fi

if [ -n "$EC_POOL_NAME" ]; then
    EC_POOL_OPT="--data-pool ${EC_POOL_NAME}"
fi

CLONE_CMD=$(cat <<EOF
    RBD="${RBD}"

    $RBD info $RBD_DST >/dev/null 2>&1 && exit 0

    rbd_make_snap $SRC_PATH

    set -e -o pipefail

    if [ "\$(rbd_format $SRC_PATH)" = "2" ]; then
        $RBD ${EC_POOL_OPT} clone "$SRC_PATH@snap" $RBD_DST
    else
        $RBD copy $SRC_PATH $RBD_DST
    fi

    if [ -n "$ORIGINAL_SIZE" -a "$SIZE" -gt "$ORIGINAL_SIZE" ]; then
        $RBD resize $RBD_DST --size $SIZE
    fi
EOF
)

ssh_exec_and_log_stdin "$DST_HOST" "$CLONE_CMD" "$CEPH_UTILS" \
                 "Error cloning $SRC_PATH to $RBD_DST in $DST_HOST"
exit 0
