#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2020, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# clone fe:SOURCE host:remote_system_ds/disk.i vmid dsid [replica_host]
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore
#   - replica_host is an optional paramter when called from the tm/ssh/clone

SRC=$1
DST=$2

VMID=$3
DSID=$4

REPLICA_HOST=$5

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    SSH_RC=/var/lib/one/remotes/etc/tm/ssh/sshrc
    SSH_UTILS=/var/lib/one/remotes/tm/ssh/ssh_utils.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    SSH_RC=$ONE_LOCATION/var/remotes/etc/tm/ssh/sshrc
    SSH_UTILS=$ONE_LOCATION/var/remotes/tm/ssh/ssh_utils.sh
fi

. $TMCOMMON
. $SSH_RC
. $SSH_UTILS

DRIVER_PATH=$(dirname $0)
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------
SRC_PATH=$(arg_path $SRC)
DST_PATH=$(arg_path $DST)
SRC_FILE=$(basename $SRC_PATH)
DST_FILE=$(basename $DST_PATH)

SRC_HOST=$(arg_host $SRC)
DST_HOST=$(arg_host $DST)

SRC_DIR=$(dirname $SRC_PATH)
DST_DIR=$(dirname $DST_PATH)

#-------------------------------------------------------------------------------
# Get Image and System DS information
#-------------------------------------------------------------------------------
DISK_ID=$(basename ${DST_PATH} | cut -d. -f2)

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SIZE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/ORIGINAL_SIZE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/RECOVERY_SNAPSHOT_FREQ \
                    /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

SIZE="${XPATH_ELEMENTS[j++]}"
ORIGINAL_SIZE="${XPATH_ELEMENTS[j++]}"
RECOVERY_SNAPSHOT_FREQ="${XPATH_ELEMENTS[j++]}"
SYS_DS_ID="${XPATH_ELEMENTS[j++]}"

# ------------------------------------------------------------------------------
# Get REPLICA_HOST from DATASTORE (if not passed as 5th arg)
# ------------------------------------------------------------------------------
if [ -z "$REPLICA_HOST" ]; then
    REPLICA_HOST=$(get_replica_host $SYS_DS_ID)

    if [ -z "$REPLICA_HOST" ]; then
        error_message "No REPLICA_HOST in datastore $SYS_DS_ID template"
        exit 1
    fi
fi

#-------------------------------------------------------------------------------
# Create DST path
#-------------------------------------------------------------------------------
ssh_make_path $DST_HOST $DST_DIR "ssh"

# ------------------------------------------------------------------------------
# Get REPLICA_STORAGE_IP from host template
# ------------------------------------------------------------------------------
REPLICA_STORAGE_IP=$(awk 'gsub(/[\0]/, x)' \
    <( onehost show $DST_HOST -x | $XPATH /HOST/TEMPLATE/REPLICA_STORAGE_IP ))

# ------------------------------------------------------------------------------
#  Synchronize Image Datastore in the Replica Host. Use a recovery snapshot
#  if present in the RECOVERY_SNAPS_DIR
# ------------------------------------------------------------------------------
if recovery_snap_exists $REPLICA_HOST $VMID/$DST_FILE; then
    # point to [disk].recovery_snaphost files
    SRC_DIR=${REPLICA_RECOVERY_SNAPS_DIR}/$VMID
    SRC_FILE="${DST_FILE}.recovery_snapshot"
    SRC_PATH="$SRC_DIR/$SRC_FILE"
    RECOVERY="YES"
else
    rsync_img_to_replica "$SRC_PATH" "$REPLICA_HOST"

    if [ -n "$ORIGINAL_SIZE" -a "$SIZE" -gt "$ORIGINAL_SIZE" ]; then
       RESIZE_CMD="qemu-img resize ${DST_PATH} ${SIZE}M"
    fi
fi

#-------------------------------------------------------------------------------
# Clone (tar|ssh) SRC into DST
#-------------------------------------------------------------------------------
log "Cloning $SRC_PATH via replica $REPLICA_HOST in $DST"

# copy locally, we hit the replica
if [ "$REPLICA_HOST" = "$DST_HOST" ]; then
    CLONE_CMD=$(cat <<EOF
        cd $SRC_DIR
        cp $SRC_FILE $DST_PATH

        if [ -d $SRC_PATH.snap ]; then
            cp -r $SRC_PATH.snap $DST_PATH.snap
        fi
EOF
)
else
    # copy to remote using faster tar|ssh
    CLONE_CMD=$(cat <<EOF
        if [ -d "${SRC_PATH}.snap" ]; then
            SRC_SNAP="${SRC_FILE}.snap"
        fi

        cd $SRC_DIR
        $TAR --transform="flags=r;s|$SRC_FILE|$DST_FILE|" -cSf - $SRC_FILE \$SRC_SNAP | \
            ssh $REPLICA_SSH_OPTS ${REPLICA_STORAGE_IP:-$DST_HOST} "$TAR xSf - -C $DST_DIR"
EOF
)
fi

# Prepare uncopressed base image copy on REPLICA for recovery snapshots
# to speedup first rsync
if [ -n "$RECOVERY_SNAPSHOT_FREQ" ] && [ "$RECOVERY" != "YES" ]; then
    SNAP_DIR="$REPLICA_RECOVERY_SNAPS_DIR/$VMID"

    BASE_CMD=$(cat <<EOF
        set -e -o pipefail

        mkdir -p $SNAP_DIR
        cd $SNAP_DIR

        if file $SRC_PATH | grep -q QCOW; then
            qemu-img convert -O qcow2 $SRC_PATH ${DST_FILE}.recovery_snapshot
        else
            cp $SRC_PATH ${DST_FILE}.recovery_snapshot
        fi
EOF
)
    ssh_forward ssh_exec_and_log "$REPLICA_HOST" "$BASE_CMD" \
        "Error uploading base image to replica"
fi



ssh_forward ssh_exec_and_log $REPLICA_HOST "$CLONE_CMD" \
    "Error copying $SRC to $DST"

if [ -n "$RESIZE_CMD" ]; then
   ssh_exec_and_log "$DST_HOST" "$RESIZE_CMD" \
       "Error resizing image $DST"
fi
