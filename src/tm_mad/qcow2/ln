#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# ln fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)
LIBFS=${DRIVER_PATH}/../../datastore/libfs.sh

. $TMCOMMON
. $LIBFS

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------
DST_PATH=$(arg_path $DST)
DST_HOST=$(arg_host $DST)
DST_DIR=$(dirname $DST_PATH)

SRC_ARG_PATH=$(arg_path $SRC)

DST_DS_PATH="$(dirname "$(dirname "$(dirname "$DST_PATH")")")"
SRC_DS_PATH="$(dirname "$(dirname "$SRC_ARG_PATH")")"

SRC_PATH="${DST_DS_PATH}${SRC_ARG_PATH##$SRC_DS_PATH}"
SNAP_DIR="${SRC_PATH}.snap"
SNAP_NAME="$(basename $SNAP_DIR)"
SRC_FORMAT="$(image_format "$SRC_PATH")"

#-------------------------------------------------------------------------------
# Create DST path
#-------------------------------------------------------------------------------

ssh_make_path $DST_HOST $DST_DIR

#-------------------------------------------------------------------------------
# Link (ln) SRC into DST
#-------------------------------------------------------------------------------
log "Linking $SRC_PATH in $DST"

if [ "$SRC_FORMAT" = "raw" ]; then
    CMD="ln -sf ${SRC_PATH} ${DST_PATH}"
else
    CMD=$(cat <<EOT
set -ex -o pipefail

mkdir -p "${SNAP_DIR}"

if [ ! -L "${SNAP_DIR}/${SNAP_NAME}" ]; then
    # backing file traversar link
    ln -s . "${SNAP_DIR}/${SNAP_NAME}" # backing file traversar link
fi

SNAP="\$(ls ${SNAP_DIR} | grep '^[[:digit:]]*$' | sort -n | tail -n 1 || :)"

if [ -z "\${SNAP}" ]; then
    SNAP=0
    # image is file, symlink back disk.x.snap/0 -> disk.x to mimic snaps struct
    ln -sf "$SRC_PATH" "$SNAP_DIR/0"
fi

rm -f "${DST_PATH}"

# VM disk symlink to the image
ln -sf "$SNAP_DIR/\$SNAP" "$DST_PATH"

rm -rf "${DST_PATH}.snap"
EOT
)
fi

ssh_exec_and_log $DST_HOST "$CMD" "Error linking $SRC to $DST"

exit 0
