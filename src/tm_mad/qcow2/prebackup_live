#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2025, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION'] unless defined?(ONE_LOCATION)

if !ONE_LOCATION
    LIB_LOCATION      ||= '/usr/lib/one'
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    LIB_LOCATION      ||= ONE_LOCATION + '/lib'
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

# %%RUBYGEMS_SETUP_BEGIN%%
require 'load_opennebula_paths'
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION

require 'rexml/document'

require_relative '../lib/tm_action'
require_relative '../lib/datastore'

#-------------------------------------------------------------------------------
# BACKUP tm_mad host:remote_dir DISK_ID:...:DISK_ID deploy_id vmid bjid dsid
#-------------------------------------------------------------------------------
TransferManager::Datastore.load_env

vm_xml = STDIN.read

dir        = ARGV[0].split ':'
disks      = ARGV[1]
_deploy_id = ARGV[2]
_bjid      = ARGV[3]
vmid       = ARGV[4]
_dsid      = ARGV[5]

rhost     = dir[0]
rdir      = dir[1]

base_path = ENV['BACKUP_BASE_PATH']

tmp_dir = "#{rdir}/tmp"
bck_dir = if base_path
              "#{base_path}/#{vmid}/backup"
          else
              "#{rdir}/backup"
          end

qcow2_util = '/var/tmp/one/tm/lib/backup_qcow2.rb'
qcow2_cmd  = "#{qcow2_util} -l -d \"#{disks}\" -x #{bck_dir}/vm.xml -p #{rdir}"

pipe_r, pipe_w = IO.pipe

Thread.new do
    loop do
        rs, _ws, _es = IO.select([pipe_r])
        break if rs[0] == pipe_r
    end

    script = <<~EOS
        set -x -e -o pipefail; shopt -qs failglob
        (ps --no-headers -o pid,cmd -C ruby \
        | awk '$0 ~ "#{qcow2_util} .* -p #{rdir}" { print $1 } END { print "\\0" }' || :) \\
        | (read -d '' PIDS
           [[ -n "$PIDS" ]] || exit 0                           # empty
           [[ -z "${PIDS//[[:space:][:digit:]]/}" ]] || exit -1 # !integers
           kill -s TERM $PIDS)
    EOS

    TransferManager::Action.ssh 'prebackup_live_cancel',
                                :host     => rhost,
                                :cmds     => script,
                                :nostdout => true,
                                :nostderr => false

    STDERR.puts "Live prebackup cancelled: #{bck_dir}"
    STDERR.flush

    # Suppress "`read': stream closed in another thread (IOError)".
    STDOUT.reopen IO::NULL
    STDERR.reopen IO::NULL
end

Signal.trap(:TERM) do
    pipe_w.write 'W'
end

ds  = TransferManager::Datastore.from_vm_backup_ds(:vm_xml => vm_xml)
cmd = ds.cmd_confinement(qcow2_cmd, rdir)

pre_script = <<~EOS
    set -ex -o pipefail

    # ----------------------------------
    # Prepare the tmp and backup folders
    # ----------------------------------
    [ -d #{tmp_dir} ] && rm -rf #{tmp_dir}

    [ -d #{bck_dir} ] && rm -rf #{bck_dir}

    mkdir -p #{tmp_dir}

    mkdir -p #{bck_dir}

    echo "#{Base64.encode64(vm_xml)}" > #{bck_dir}/vm.xml

    # --------------------------------------
    # Create backup live
    # --------------------------------------
    #{cmd}
EOS

rc = TransferManager::Action.ssh('prebackup_live',
                                 :host => rhost,
                                 :cmds => pre_script,
                                 :nostdout => false,
                                 :nostderr => false)

if rc.code != 0
    STDERR.puts "Error preparing disk files: #{rc.stdout} #{rc.stderr}"
end

exit(rc.code)
