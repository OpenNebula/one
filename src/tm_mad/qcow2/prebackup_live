#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #
ONE_LOCATION = ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby'
    GEMS_LOCATION     = '/usr/share/one/gems'
    VMDIR             = '/var/lib/one'
    CONFIG_FILE       = '/var/lib/one/config'
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     = ONE_LOCATION + '/share/gems'
    VMDIR             = ONE_LOCATION + '/var'
    CONFIG_FILE       = ONE_LOCATION + '/var/config'
end

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION

require 'rexml/document'

require_relative '../lib/tm_action'
require_relative '../lib/kvm'
require_relative '../lib/datastore'

# TODO: fsfreeze for each hypervisor based on VM_MAD
include TransferManager::KVM

#-------------------------------------------------------------------------------
# BACKUP tm_mad host:remote_dir DISK_ID:...:DISK_ID deploy_id vmid dsid
#-------------------------------------------------------------------------------
vm_xml = STDIN.read

dir        = ARGV[0].split ':'
disks      = ARGV[1]
_deploy_id = ARGV[2]
_vmid      = ARGV[3]
_dsid      = ARGV[4]

rhost     = dir[0]
rdir      = dir[1]

tmp_dir = "#{rdir}/tmp"
bck_dir = "#{rdir}/backup"

qcow2_util = '/var/tmp/one/tm/lib/backup_qcow2.rb'
qcow2_cmd  = "#{qcow2_util} -l -d \"#{disks}\" -x #{bck_dir}/vm.xml -p #{rdir}"

ds  = TransferManager::Datastore.new(:vm_xml => vm_xml)
cmd = ds.cmd_confinement(qcow2_cmd, rdir)

pre_script = <<~EOS
    set -ex -o pipefail

    # ----------------------------------
    # Prepare the tmp and backup folders
    # ----------------------------------
    [ -d #{tmp_dir} ] && rm -rf #{tmp_dir}

    [ -d #{bck_dir} ] && rm -rf #{bck_dir}

    mkdir -p #{tmp_dir}

    mkdir -p #{bck_dir}

    echo "#{Base64.encode64(vm_xml)}" > #{bck_dir}/vm.xml

    # --------------------------------------
    # Create backup live
    # --------------------------------------
    #{cmd}
EOS

rc = TransferManager::Action.ssh('prebackup_live',
                                 :host => rhost,
                                 :cmds => pre_script,
                                 :nostdout => false,
                                 :nostderr => false)

if rc.code != 0
    STDERR.puts "Error preparing disk files: #{rc.stdout} #{rc.stderr}"
end

exit(rc.code)
