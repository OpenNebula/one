#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2025, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION'] unless defined?(ONE_LOCATION)

if !ONE_LOCATION
    LIB_LOCATION      ||= '/usr/lib/one'
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    LIB_LOCATION      ||= ONE_LOCATION + '/lib'
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

# %%RUBYGEMS_SETUP_BEGIN%%
require 'load_opennebula_paths'
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION

require 'rexml/document'
require 'json'

require_relative '../lib/tm_action'
require_relative '../lib/datastore'
require_relative '../lib/backup_qcow2'

# Replace a non-persistent VM disk with a backup image
#   :rhost host where the VM is running
#   :rdir VM folder
#   :id disk id
#   :path path to the disk image
def replace_np(opts = {})
    snap_path = "#{opts[:rdir]}/disk.#{opts[:id]}.snap"
    disk_path = "#{opts[:rdir]}/disk.#{opts[:id]}"

    _script = <<~EOS
        set -e -o pipefail

        # Clean existing snapshots
        [ -d #{snap_path} ] && rm -rf #{snap_path}
        mkdir -p #{snap_path}

        mv #{opts[:path]} #{snap_path}/0

        rm -f #{disk_path}

        ln -sf disk.#{opts[:id]}.snap/0 #{disk_path}

        cd #{snap_path}

        ln -sf . disk.#{opts[:id]}.snap
    EOS
end

def replace_p(opts = {})
    image_snap = "#{opts[:source]}.snap"
    disk_path  = "#{opts[:rdir]}/disk.#{opts[:id]}"

    _script = <<~EOS
        set -e -o pipefail

        # Replace existing disk in image datastore
        [ -d #{image_snap} ] && rm -rf #{image_snap}
        mkdir -p #{image_snap}

        mv #{opts[:path]} #{opts[:source]}

        ln -sf #{opts[:source]} #{image_snap}/0

        cd #{image_snap}

        ln -sf . `basename #{image_snap}`

        # VM disk symlink to the image
        rm #{disk_path}

        ln -sf #{image_snap}/0 #{disk_path}

        [ -d #{disk_path}.snap ] && rm -rf #{disk_path}.snap

        exit 0
    EOS
end

#-------------------------------------------------------------------------------
# RESTORE host:remote_system_ds vm_id img_id inc_id disk_id
#-------------------------------------------------------------------------------
dir     = ARGV[0].split ':'
vm_id   = ARGV[1]
img_id  = ARGV[2]
inc_id  = ARGV[3]
disk_id = ARGV[4].to_i

rhost = dir[0]
rdir  = dir[1]

begin
    action = TransferManager::Action.new(:action_name => 'restore',
                                         :vm_id => vm_id)

    vm = KVMDomain.new(action.vm.to_xml, rdir)

    # --------------------------------------------------------------------------
    # Image & Datastore information
    # --------------------------------------------------------------------------
    image = OpenNebula::Image.new_with_id(img_id.to_i, action.one)

    rc = image.info

    raise rc.message.to_s if OpenNebula.is_error?(rc)

    bk_ds = TransferManager::Datastore.from_image_ds(:image  => image,
                                                     :client => action.one)
    # --------------------------------------------------------------------------
    # Backup information
    # --------------------------------------------------------------------------
    xml_data = <<~EOS
        #{action.vm.to_xml}
        #{image.to_xml}
    EOS

    disks = bk_ds.ls_increment(inc_id, xml_data, disk_id)

    # --------------------------------------------------------------------------
    # Restore disks in Host VM folder
    # --------------------------------------------------------------------------
    dpaths = {}

    disks.each do |id, url|
        if id != 'tpm' && action.persistent?(id)
            isource = action.vm["/VM/TEMPLATE/DISK [ DISK_ID = #{id} ]/SOURCE"]
            dst     = "#{isource}.backup"

            dpaths[id] = {
                :persistent => true,
                :path       => dst,
                :source     => isource
            }
        else
            dst = "#{rdir}/disk.#{id}.backup"

            dpaths[id] = {
                :persistent => false,
                :path       => dst,
                :source     => nil
            }
        end

        download = <<~EOS
            #{__dir__}/../../datastore/downloader.sh --nodecomp #{url} - | \
              ssh #{rhost} dd of=#{dst} bs=64k conv=sparse
        EOS

        rc = action.ssh(:host => nil,
                        :cmds => download,
                        :forward  => false,
                        :nostdout => false,
                        :nostderr => false)

        # TODO: cleanup dpaths
        raise 'cannot download backup disk' unless rc.code == 0
    end

    raise "disk #{disk_id} not found" if dpaths.empty?

    # --------------------------------------------------------------------------
    # Replace VM disks with backup copies (~prolog)
    # --------------------------------------------------------------------------
    dpaths.each do |id, rdisk|
        restore =
            if id == 'tpm'
                vm.restore_tpm_sh(rdisk[:path])
            else
                opts = {
                    :rhost  => rhost,
                    :rdir   => rdir,
                    :id     => id,
                    :path   => rdisk[:path],
                    :source => rdisk[:source]
                }

                if rdisk[:persistent]
                    replace_p(opts)
                else
                    replace_np(opts)
                end
            end

        rc = action.ssh(:host => rhost,
                        :cmds => restore,
                        :forward  => false,
                        :nostdout => false,
                        :nostderr => false)

        raise 'cannot copy disk backup' unless rc.code == 0
    end

    dpaths.delete('tpm')

    # Delete bitmaps from all disks after restore, as the chain will be reset
    # (see https://github.com/OpenNebula/one/issues/6741)
    script = []
    disks.each do |id, _|
        script << <<~EOF
            qemu-img info -U #{rdir}/disk.#{id} --output json \
            | jq -r '(."format-specific".data.bitmaps // [])[].name' \
            | xargs -rn1 qemu-img bitmap --remove #{rdir}/disk.#{id}
        EOF
    end

    rc = action.ssh(:host => rhost,
                    :cmds => script.join,
                    :forward  => false,
                    :nostdout => false,
                    :nostderr => false)

    raise 'cannot clean bitmaps' unless rc.code == 0
rescue StandardError => e
    STDERR.puts "Error restoring VM disks: #{e.message}"
    exit(1)
end
