#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# mvds host:remote_system_ds/disk.i fe:SOURCE vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2
VMID=$3

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

. $TMCOMMON

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${SRC} | cut -d. -f2)

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK\[DISK_ID=$DISK_ID\]/FORMAT)

FORMAT="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------

SRC_HOST=$(arg_host $SRC)
SRC_PATH=$(arg_path $SRC)
SRC_SNAP_DIR=${SRC_PATH}.snap

DST_PATH="$DST"
DST_FILE=$(basename $DST)
DST_SNAP_DIR=${DST_PATH}.snap

#-------------------------------------------------------------------------------
# Move the image back to the datastore
#-------------------------------------------------------------------------------

log "Moving $SRC to datastore as $DST"

MV_SNAPSHOTS=$(cat <<EOT
    if [ -d "${SRC_SNAP_DIR}" ]; then
        mkdir -p "${DST_SNAP_DIR}"
        for F in \$(ls ${SRC_SNAP_DIR}); do
            if [ -f ${SRC_SNAP_DIR}/\$F ]; then
                mv ${SRC_SNAP_DIR}/\$F ${DST_SNAP_DIR}
            fi
        done
    fi
EOT
)

if [ "$FORMAT" = "qcow2" ]; then
    MV_SRC=$(cat <<EOT
        mkdir -p ${DST_SNAP_DIR}
        cd "${DST_SNAP_DIR}"
        ln -sf "." "${DST_FILE}.snap" || :

        rebase_backing_files "$DST_FILE"

        SNAP="\$(ls | grep '^[[:digit:]]*$' | sort -n | tail -n 1 || :)"
        cd ..
        rm "${DST_FILE}"
        ln -sf "${DST_FILE}.snap/\$SNAP" "${DST_FILE}"
EOT
)
else
    MV_SRC="mv ${SRC_PATH} ${DST_PATH}"
fi

CMD=$(cat <<EOT
set -ex -o pipefail
$(type rebase_backing_files  |grep -v 'is a function')
${MV_SNAPSHOTS}
${MV_SRC}
EOT
)

ssh_exec_and_log "$SRC_HOST" "$CMD" "Error moving disk ${SRC_PATH} to ${DST_PATH} on $SRC_HOST"

exit 0
