#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# ln fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2
VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)
LIBFS=${DRIVER_PATH}/../../datastore/libfs.sh

. $TMCOMMON

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------
DST_HOST=`arg_host $DST`
DST_PATH=`arg_path $DST`
DST_SNAP_DIR=${DST_PATH}.snap
DST_FILE=`basename $DST_PATH`
DST_DIR=`dirname $DST_PATH`

SRC_PATH=`arg_path $SRC`
SRC_SNAP_DIR=${SRC_PATH}.snap

#-------------------------------------------------------------------------------
# Create DST path
#-------------------------------------------------------------------------------

ssh_make_path $DST_HOST $DST_DIR 'ssh'

#-------------------------------------------------------------------------------
# Copy SRC into DST
#-------------------------------------------------------------------------------
log "Copying $SRC_PATH in $DST"

if [ -d "${SRC_SNAP_DIR}" ]; then
    CP_CMD=$(cat <<EOT
    for F in \$(ls ${SRC_SNAP_DIR}); do
        if [ -f ${SRC_SNAP_DIR}/\$F ]; then
            cp ${SRC_SNAP_DIR}/\$F ${DST_SNAP_DIR}
        fi
    done
EOT
)
else
    CP_CMD="cp ${SRC_PATH} ${DST_SNAP_DIR}/0"
fi

CMD=$(cat <<EOT
set -ex -o pipefail
mkdir -p "${DST_SNAP_DIR}"
cd "${DST_SNAP_DIR}"

${CP_CMD}

rm -f "${DST_FILE}.snap"
ln -sf "." "${DST_FILE}.snap"

rebase_backing_files "$DST_FILE"

SNAP="\$(ls | grep '^[[:digit:]]*$' | sort -n | tail -n 1 || :)"
cd ..
rm -f "${DST_FILE}"
ln -sf "${DST_FILE}.snap/\$SNAP" "${DST_FILE}"

EOT
)

ssh_exec_and_log_stdin $DST_HOST "$CMD" "$LIBFS" "Error copying $SRC to $DST"

exit 0
