#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

###############################################################################
# This script is used to monitor the free and used space of a datastore
###############################################################################

# -------- Set up the environment to source common tools & conf ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../../datastore/libfs.sh

# -------- Get datastore arguments from OpenNebula core ------------

DRV_ACTION=`cat -`
DS_ID=$1

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb -b $DRV_ACTION"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' ELEMENT; do
    XPATH_ELEMENTS[i++]="$ELEMENT"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE_LOCATION \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/MONITOR_VM_DISKS)

unset i

BASE_PATH="${XPATH_ELEMENTS[i++]}/$2"
BRIDGE_LIST="${XPATH_ELEMENTS[i++]}"
MONITOR_VM_DISKS="${XPATH_ELEMENTS[i++]}"

# ------------ Compute datastore usage -------------

MONITOR_SCRIPT=$(cat <<EOF
if [ ! -d $BASE_PATH ]; then
    mkdir -p $BASE_PATH
fi

USED_MB=\$(df -B1M -P $BASE_PATH 2>/dev/null | tail -n 1 | awk '{print \$3}')
TOTAL_MB=\$(df -B1M -P $BASE_PATH 2>/dev/null | tail -n 1 | awk '{print \$2}')
FREE_MB=\$(df -B1M -P $BASE_PATH 2>/dev/null | tail -n 1 | awk '{print \$4}')

if [ -z "\$USED_MB" -o -z "\$TOTAL_MB" -o -z "\$FREE_MB" ]; then
    MSG="Empty value found"
    echo "\$MSG: USED_MB=\$USED_MB, TOTAL_MB=\$TOTAL_MB, FREE_MB=\$FREE_MB"
    exit 1
fi

echo "USED_MB=\$USED_MB"
echo "FREE_MB=\$FREE_MB"
echo "TOTAL_MB=\$TOTAL_MB"

EOF
)

MONITOR_VM_SCRIPT=$(cat <<EOF

VMS=\$(ls "$BASE_PATH" | grep '^[0-9]\+$')

for VM in \$VMS; do
    VMDIR="${BASE_PATH}/\${VM}"
    DISKS=\$(ls "\$VMDIR" 2>/dev/null | grep '^disk\.[0-9]\+$')

    [ -z \$DISKS ] && continue

    VM_MONITOR=""

    for DISK in \$DISKS; do
        DISK_ID="\$(echo "\$DISK" | cut -d. -f2)"
        DISK_SIZE="\$(du -mL "\${VMDIR}/\${DISK}" 2>/dev/null | awk '{print \$1}')"
        SNAP_DIR="\${VMDIR}/\${DISK}.snap"

        [ -z "\$DISK_SIZE" ] && continue

        VM_MONITOR="\${VM_MONITOR} DISK_SIZE = [ ID=\${DISK_ID}, SIZE=\${DISK_SIZE}]"

        if [ -e "\$SNAP_DIR" ]; then
            SNAPS="\$(ls "\$SNAP_DIR" 2>/dev/null | grep '^[0-9]$')"

            for SNAP in \$SNAPS; do
                SNAP_SIZE="\$(du -mL "\${SNAP_DIR}/\${SNAP}" 2>/dev/null | awk '{print \$1}')"
                [ -z "\$SNAP_SIZE" ] && continue

                VM_MONITOR="\${VM_MONITOR}\nSNAPSHOT_SIZE = "\
                    "[ ID=\${SNAP}, DISK_ID=\${DISK_ID}, SIZE=\${SNAP_SIZE}]"
            done
        fi
    done

    VM_MONITOR_B64="\$(echo \$VM_MONITOR | base64 -w 0)"
    echo "VM=[ID=\$VM, MONITOR=\"\$VM_MONITOR_B64\"] "
done

EOF
)

if [ -n "$BRIDGE_LIST" ]; then
    HOST=`get_destination_host`
    MONITOR_DATA=$(ssh_monitor_and_log "$HOST" "$MONITOR_SCRIPT" "Remote monitor script" 2>&1)
    MONITOR_STATUS=$?

    if [ $MONITOR_VM_DISKS -eq 1 ]; then
        MONITOR_DATA_VMS=$(ssh_monitor_and_log "$HOST" "$MONITOR_VM_SCRIPT" "Remote VM disks monitor script" 2>&1)
        MONITOR_VMS_STATUS=$?
    fi
else
    MONITOR_DATA=$(monitor_and_log "$MONITOR_SCRIPT" "Monitor script" 2>&1)
    MONITOR_STATUS=$?

    if [ $MONITOR_VM_DISKS -eq 1 ]; then
        MONITOR_DATA_VMS=$(monitor_and_log "$MONITOR_VM_SCRIPT" "VM disks monitor script" 2>&1)
        MONITOR_VMS_STATUS=$?
    fi
fi

echo $MONITOR_DATA

if [ $MONITOR_VM_DISKS -eq 1 ]; then
    send_to_monitor MONITOR_VM $MONITOR_VMS_STATUS -1 "$MONITOR_DATA_VMS"
fi

exit $MONITOR_STATUS
