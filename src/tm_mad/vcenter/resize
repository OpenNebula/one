#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

# resize image size vmid

ONE_LOCATION = ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION = "/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION = ONE_LOCATION + "/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver'

src          = ARGV[0]
new_size     = ARGV[1]
vmid         = ARGV[2]

check_valid src,"src"
check_valid new_size,"new_size"
check_valid vmid,"vmid"

disk_id = src.split(".")[-1]
hostname,  = src.split ":"

# Get host ID
host = VCenterDriver::VIHelper.find_by_name(OpenNebula::HostPool, hostname)
host_id = host['ID']

# Get OpenNebula VM
one_vm = VCenterDriver::VIHelper.one_item(OpenNebula::VirtualMachine, vmid)
vm_ref = one_vm['DEPLOY_ID']

begin
    # This action is only possible when VM in ACTIVE / DISK_RESIZE_POWEROFF
    if one_vm['LCM_STATE'].to_i != 63
        raise "'disk-resize' operation is not supported for vCenter running VMs."
    end

    vi_client = VCenterDriver::VIClient.new_from_host(host_id)
    vm = VCenterDriver::VirtualMachine.new(vi_client, vm_ref, vmid )

    # Cannot resize if VM has snapshots
    if vm.has_snapshots?
        raise "'disk-resize' operation is not supported for VMs with system snapshots."
    end

    disk = vm.disk(disk_id)
    disk.set_size(new_size)

    vm.resize_disk(disk)

rescue Exception => e
    message = "Error resizing disk #{disk_id} for VM #{one_vm["NAME"]} "\
              "Reason: #{e.message}\n#{e.backtrace}"
    STDERR.puts error_message(message)
    exit -1
ensure
    vi_client.close_connection if vi_client
end
