#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2023, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

# DELETE <host:remote_system_ds/disk.i|host:remote_system_ds/> vmid dsid
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)
# ---------------------------------------------------------------------------- #

ONE_LOCATION ||= ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

path = ARGV[0]
vmid = ARGV[1]
dsid = ARGV[2]

check_valid path, 'path'
check_valid vmid, 'vmid'
check_valid dsid, 'dsid'

hostname, img_path = path.split(':')

# Get host ID
host = VCenterDriver::VIHelper.find_by_name(OpenNebula::HostPool, hostname)
host_id = host['ID']

# Get VM
one_vm = VCenterDriver::VIHelper.one_item(OpenNebula::VirtualMachine, vmid)
vm_ref = one_vm['DEPLOY_ID']

vm = nil

# tm:delete INIT block:
begin
    @error_message = 'error obtaining client and vm'
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)

    unless vm_ref && !vm_ref.empty?
        # we try to get vcenter item
        vcenter_vm = VCenterDriver::VIHelper
                     .find_vcenter_vm_by_name(one_vm, host, vi_client)

        # If no VM object retrieved, raise an exception
        if !vcenter_vm
            raise "Could not find the undeployed VM in vCenter using it's name"
        end

        vm_ref = vcenter_vm._ref
    end

    vm = VCenterDriver::VirtualMachine.new(vi_client, vm_ref, vmid)
    vm.one_item = one_vm

    is_disk = path.match(/disk\.\d+$/)
    if is_disk
        dsid = img_path.split('/')[-3] # get dsid from path
        @error_message = "Error deleting disk with #{img_path} "\
                         "in datastore #{dsid}"

        # Get disk info, destroy it if possible
        disk_id = img_path.split('.')[-1]
        disk = vm.disk(disk_id)
        vm.destroy_disk(disk)
    else
        @error_message = "Error unregistering vm #{vmid} (#{vm_ref})."
        vm.poweroff_hard if vm.powered_on?

        if vm.instantiated_as_persistent?
            vm.remove_all_snapshots if vm.snapshots?
            vm.convert_to_template
        else
            vm.destroy
        end
    end
rescue StandardError => e
    vi_client.close_connection if vi_client
    message = "#{@error_message} Reason: #{e.message}."
    OpenNebula.log_error(message)
    if VCenterDriver::CONFIG[:debug_information]
        STDERR.puts "#{message} #{e.backtrace}"
    end
    exit(-1)
end
