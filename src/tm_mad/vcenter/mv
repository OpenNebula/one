#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2020, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION ||= ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
    GEMS_LOCATION     ||= '/usr/share/one/gems'
else
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     ||= ONE_LOCATION + '/share/gems'
end

if File.directory?(GEMS_LOCATION)
    Gem.use_paths(GEMS_LOCATION)
    $LOAD_PATH.reject! {|l| l =~ /(vendor|site)_ruby/ }
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

src  = ARGV[0]
dst  = ARGV[1]
vmid = ARGV[2]
dsid = ARGV[3]

begin
    dst_path  = OpenNebula.arg_path(dst)
    host_orig = OpenNebula.arg_host(src)
    host_dest = OpenNebula.arg_host(dst)

    exit 0 if OpenNebula.is_disk?(dst_path)
    exit 0 if src == dst

    one_client = OpenNebula::Client.new
    vm = OpenNebula::VirtualMachine.new_with_id(vmid, one_client)
    vm.info

    src_ds = vm.retrieve_elements('HISTORY_RECORDS/HISTORY/DS_ID')[-2]

    if src_ds == dsid
        VCenterDriver::VirtualMachine
            .migrate_routine(vmid, host_orig, host_dest)
    else
        VCenterDriver::VirtualMachine
            .migrate_routine(vmid, host_orig, host_dest, false, dsid)
    end
rescue StandardError => e
    message = "Cannot migrate for VM #{vmid}. "\
              'Failed due to '\
              "\"#{e.message}\"\n"
    OpenNebula.log_error(message)
    if VCenterDriver::CONFIG[:debug_information]
        STDERR.puts "#{message} #{e.backtrace}"
    end
    exit(-1)
end
