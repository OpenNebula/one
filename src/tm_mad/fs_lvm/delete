#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# DELETE <host:remote_system_ds/disk.i|host:remote_system_ds/>
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host

DST=$1
VM_ID=$2
DS_ID=$3

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb"

source $TMCOMMON
source ${DRIVER_PATH}/../../etc/tm/fs_lvm/fs_lvm.conf
source ${DRIVER_PATH}/../../datastore/libfs.sh

#-------------------------------------------------------------------------------
# Return if deleting a disk, we will delete them when removing the
# remote_system_ds directory for the VM (remotely)
#-------------------------------------------------------------------------------

# Workaround: take DST_HOST from the XML (#2352)
while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID | $XPATH \
    /VM/HISTORY_RECORDS/HISTORY/HOSTNAME)
unset i
DST_HOST="${XPATH_ELEMENTS[i++]}"

# Fallback take DST_HOST from the destination path
DST_HOST="${DST_HOST:-$(arg_host $DST)}"
DST_PATH=`arg_path $DST`

if [ "${DST_PATH##*/}" = "$VM_ID" ]; then
    DS_SYS_ID=$(echo $DST_PATH | $AWK -F '/' '{print $(NF-1)}')
    FIND_DEPTH=1
else
    DS_SYS_ID=$(echo $DST_PATH | grep -E '\/disk\.[[:digit:]]+$' | $AWK -F '/' '{print $(NF-2)}')
    FIND_DEPTH=0
fi

# Zero space
ZERO_CMD=$(cat <<EOF
    set -x
    while read DISK_PATH; do
        DEV=\$(readlink \$DISK_PATH)
        if echo "\$DEV" | grep "^/dev/" &>/dev/null; then
            ${SUDO} ${LVCHANGE} -ay "\${DEV}"
            ${DD} if=/dev/zero of="\${DEV}" bs=64k ||:
        fi
    done < <(find "$DST_PATH" -mindepth $FIND_DEPTH -maxdepth $FIND_DEPTH -type l)
EOF
)

# Delete the device if it's a clone (LVM snapshot)
DELETE_CMD=$(cat <<EOF
    set -x
    while read DISK_PATH; do
        DEV=\$(readlink \$DISK_PATH)
        if echo "\$DEV" | grep "^/dev/" &>/dev/null; then
            $SUDO $LVREMOVE -f "\$DEV" && rm -f "\$DISK_PATH"
        fi
    done < <(find "$DST_PATH" -mindepth $FIND_DEPTH -maxdepth $FIND_DEPTH -type l)

    if [ -d "$DST_PATH" ]; then
        rm -rf "$DST_PATH"
    else
        rm -f "$DST_PATH"
    fi
EOF
)

if [ "${ZERO_LVM_ON_DELETE}" = "yes" ]; then
    ssh_exec_and_log "$DST_HOST" "$ZERO_CMD" "Error cleaning $DST_PATH"
fi

LOCK="tm-fs_lvm-${DS_SYS_ID}.lock"
exclusive "${LOCK}" 120 ssh_exec_and_log "$DST_HOST" "$DELETE_CMD" \
    "Error deleting $DST_PATH"

hup_collectd $DST_HOST
