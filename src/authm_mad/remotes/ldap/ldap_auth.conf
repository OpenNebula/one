server 1:
    # Ldap user able to query, if not set connects as anonymous. For
    # Active Directory append the domain name. Example:
    # Administrator@my.domain.com
    #:user: 'admin'
    #:password: 'password'

    # Ldap authentication method
    :auth_method: :simple

    # Ldap server
    :host: localhost
    :port: 389

    # Connection and authentication timeout
    #:timeout: 15

    # Uncomment this line for tls connections, use :simple_tls or :start_tls
    #:encryption: :simple_tls

    # base hierarchy where to search for users and groups
    :base: 'dc=domain'

    # group the users need to belong to. If not set any user will do
    #:group: 'cn=cloud,ou=groups,dc=domain'

    # field that holds the user name, if not set 'cn' will be used
    :user_field: 'cn'

    # for Active Directory use this user_field instead
    #:user_field: 'sAMAccountName'

    # field name for group membership, by default it is 'member'
    #:group_field: 'member'

    # user field that is in the group group_field, if not set 'dn' will be used
    #:user_group_field: 'dn'

    # Generate mapping file from group template info
    :mapping_generate: true

    # Seconds a mapping file remain untouched until the next regeneration
    :mapping_timeout: 300

    # Name of the mapping file in OpenNebula var directory
    :mapping_filename: server1.yaml

    # Key from the OpenNebula template to map to an AD group
    :mapping_key: GROUP_DN

    # Default group ID used for users in an AD group not mapped
    :mapping_default: 1

    # use RFC2307bis for groups
    # if false, depending on your LDAP server configuration,
    # set user_field and user_group_field 'uid' and group_field 'memberUid'
    :rfc2307bis: true

    # DN of a group, if user is member of that group in LDAP, this user
    # will be group admin of all mapped LDAP groups in OpenNebula.
    #:group_admin_group_dn: 'cn=admins,ou=groups,dc=domain'

# this example server wont be called as it is not in the :order list
server 2:
    :auth_method: :simple
    :host: localhost
    :port: 389
    :base: 'dc=domain'
    #:group: 'cn=cloud,ou=groups,dc=domain'
    :user_field: 'cn'

# There are 2 (mutually exclusive) options of how the servers are chosen
#
# 1. :order:
# ----------
#
# List the order the servers are queried
#
# :order is defined as a list of server names and/or nested lists
# of server names (representing the availability group). The servers
# in the main list are consulted in the order they are written until
# the authentication succeeds. In the nested server lists (avail.
# groups), user is authenticated only against the first online server.
# If user is passed/refused by the server in the availability group,
# no other server is consulted from the same group, but
# the authentication process continues with the next server/group in
# the main list.
#
# Examples:
#
# 1) simple list
# :order:
#     - server1
#     - server2
#     - server3
#
# 2) list with availability group
# :order:
#     - server1
#     - ['server2', 'server3', 'server4']    # availability group
#     - server5
#
:order:
    - server 1
    #- server 2
#
# 2. :match_user_regex:
# ---------------------
#
# Allows mapping user by matching a regex to a particual LDAP server
# or server list
#
# Example:
#
# :match_user_regex:
#   "^(.*)@orgA$": server1
#   "^(.*)@orgB$": server2
#   "^(.*)@orgC$": ['server3', 'server4']
#
#  In this example user `joe@orgA` will be searched in server1 and user
#  `paul@orgC` will be searched in server3 (and server4 if not found)
#
#  If the regex contains capture group like here, only this part of the
#  username is searched  in the LDAP actually. So the user entry only
#  have attribute like `cn: paul`. The suffix is only used to identify
#  the server.
