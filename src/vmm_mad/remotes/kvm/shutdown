#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2025, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

DRIVER_PATH="$(dirname $0)"
source "${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc"
source "${DRIVER_PATH}/../../scripts_common.sh"

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb"

count=0

deploy_id=$1

# Get datastore path to get vm.xml
VMDIR="$(/var/tmp/one/vgpu "DATASTORE" "$deploy_id")"

#---------------------------------------------------------------------------
# Back up vTPM directory from libvirt to /tpm in VM dir
#---------------------------------------------------------------------------
domxml="$(virsh --connect $LIBVIRT_URI dumpxml "$deploy_id")"
if echo "$domxml" | "$XPATH" -t '/domain/devices/tpm/backend[@type="emulator"]' > /dev/null 2>&1; then
    DOM_UUID=$(echo "$domxml" | "$XPATH" '/domain/uuid')
    (sudo -l | grep -q vtpm_setup) && sudo /var/tmp/one/vtpm_setup backup "$DOM_UUID" "$VMDIR"
fi

shutdown_command="virsh --connect $LIBVIRT_URI shutdown $deploy_id"

# Check if the domain is already shutdown
virsh --connect $LIBVIRT_URI --readonly dominfo $deploy_id > /dev/null 2>&1 || exit 0

#If VM does not have ACPI enabled do not try to use it, destroy instead shutdown
if [ "x$CANCEL_NO_ACPI" = "xyes" ]; then
    virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep -q acpi

    if [ "x$?" != "x0" ]; then
       shutdown_command="virsh --connect $LIBVIRT_URI destroy $deploy_id"
    fi
fi

if [ -z "$SHUTDOWN_TIMEOUT" ]; then
    TIMEOUT=120
else
    TIMEOUT=$SHUTDOWN_TIMEOUT
fi

HALF_LOOP=$(($TIMEOUT/2))

function monitor
{
    # Issue another shutdown to cover occasional libvirt lack of attention
    if [ "$count" -eq "$HALF_LOOP" ]
    then
        eval $shutdown_command
    fi

    let count=count+1

    export count

    virsh --connect $LIBVIRT_URI --readonly dominfo $deploy_id > /dev/null 2>&1

    [ "x$?" != "x0" ]
}

exec_and_log "$shutdown_command" \
    "Could not shutdown $deploy_id"

retry $TIMEOUT monitor

force_shutdown "$deploy_id" \
    "virsh --connect $LIBVIRT_URI destroy $deploy_id"

# Destroy vGPU. Only if supported by node
(sudo -l | grep -q vgpu) && sudo /var/tmp/one/vgpu "DELETE" "$VMDIR/vm.xml"

# Compact memory
if [ "x$CLEANUP_MEMORY_ON_STOP" = "xyes" ]; then
    (sudo -l | grep -q sysctl) && sudo -n sysctl vm.drop_caches=3 vm.compact_memory=1 &>/dev/null &
fi

sleep 4

