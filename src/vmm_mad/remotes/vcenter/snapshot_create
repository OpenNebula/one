#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver'

vm_ref          = ARGV[0]
snap_id         = ARGV[1]
vc_cluster_name = ARGV[3]

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(STDIN.read), 'VMM_DRIVER_ACTION_DATA')

host = VCenterDriver::VIHelper.find_by_name(OpenNebula::HostPool, vc_cluster_name)
host_id = host['ID']

snap_name = drv_action["VM/TEMPLATE/SNAPSHOT[ACTIVE='YES']/NAME"]

begin
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)

    vm = VCenterDriver::VirtualMachine.new_from_ref(vm_ref, vi_client)

    one_vm = drv_action.retrieve_xmlelements("VM").first

    vm.one_item = one_vm

    persistent_disks = one_vm.retrieve_xmlelements("TEMPLATE/DISK[PERSISTENT=YES]")

    if !persistent_disks.empty?
        STDERR.puts "Snapshot of VM #{vm_ref} on vCenter cluster "\
                    "#{vc_cluster_name} cannot be performed if "\
                    "it contains persistent disks"
        exit 1
    end

    puts vm.create_snapshot(snap_id, snap_name)

rescue Exception => e
    message = "Snapshot of VM #{vm_ref} on vCenter cluster "\
              "#{vc_cluster_name} failed due to "\
              "\"#{e.message}\"\n#{e.backtrace}"
    STDERR.puts error_message(message)
    exit -1
ensure
    vi_client.close_connection if vi_client
end