#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

require 'vcenter_driver'

vm_ref          = ARGV[0]
vc_cluster_name = ARGV[-1]

host = VCenterDriver::VIHelper.find_by_name(OpenNebula::HostPool, vc_cluster_name)
host_id = host['ID']

drv_action_enc = STDIN.read.gsub("\n","")
drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(drv_action_enc),
                          'VMM_DRIVER_ACTION_DATA')

lcm_state = drv_action["/VMM_DRIVER_ACTION_DATA/VM/LCM_STATE"]
check_valid(lcm_state, "lcm_state")
lcm_state_str = OpenNebula::VirtualMachine::LCM_STATE[lcm_state.to_i]

if lcm_state_str == "SAVE_MIGRATE"
    STDERR.puts "Migration between vCenters cluster not supported"
    exit -1
end

if !["SAVE_SUSPEND", "SAVE_STOP"].include?(lcm_state_str)
    STDERR.puts "Wrong lcm state when saving VM"
    exit -1
end

begin
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)

    vm = VCenterDriver::VirtualMachine.new_from_ref(vm_ref, vi_client)

    vm.suspend

rescue Exception => e
    message = "Save of VM #{vm_ref} on vCenter cluster "\
              "#{vc_cluster_name} failed due to "\
              "\"#{e.message}\"\n#{e.backtrace}"
    STDERR.puts error_message(message)
    exit -1
ensure
    vi_client.close_connection if vi_client
end
