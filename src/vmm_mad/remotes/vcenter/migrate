#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION'] unless defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION ||= '/usr/lib/one/ruby'
else
    RUBY_LIB_LOCATION ||= ONE_LOCATION + '/lib/ruby'
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

d_id     = ARGV[0]
vm_id    = ARGV[-2]
src_host = ARGV[-3]
dst_host = ARGV[-4]

begin
    vi_client = VCenterDriver::VIClient.new_from_host(src_host)
    vm        = VCenterDriver::VirtualMachine.new(vi_client, d_id, vm_id)

    # TODO: compare src_dsid with dest_dsid variables
    new_ds = false

    error = !vm.disks_each(:managed?).empty? && new_ds
    raise 'live migration with managed disk is not supported' if error

    if new_ds
        VCenterDriver::VirtualMachine
            .migrate_routine(vm_id, src_host, dst_host, true, dsid)
    else
        VCenterDriver::VirtualMachine.migrate_routine(vm_id, src_host, dst_host)
    end
rescue StandardError => e
    message = "Cannot migrate for VM #{vm_id}"\
              'failed due to '\
              "\"#{e.message}\"."
    OpenNebula.log_error(message)

    if VCenterDriver::CONFIG[:debug_information]
        STDERR.puts "#{message} #{e.backtrace}"
    end

    exit(-1)
end
