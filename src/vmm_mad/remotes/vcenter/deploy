#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION'] unless defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby' unless defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby' unless defined?(RUBY_LIB_LOCATION)
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'vcenter_driver'

dfile        = ARGV[0]
cluster_name = ARGV[1]
vm_id        = ARGV[2]

## Helpers

def deploy_id_valid?(deploy_id)
    deploy_id && !deploy_id.empty?
end

drv_action = OpenNebula::XMLElement.new
drv_action.initialize_xml(Base64.decode64(STDIN.read), 'VM')

deploy_id    = drv_action['DEPLOY_ID']
host_id      = drv_action['HISTORY_RECORDS/HISTORY/HID']

begin
    vi_client = VCenterDriver::VIClient.new_from_host(host_id)
    one_vm = VCenterDriver::VIHelper.one_item(OpenNebula::VirtualMachine, vm_id)

    if deploy_id_valid?(deploy_id)
        # VM is not new, we just need to reconfigure it and to power it on
        vm = VCenterDriver::VirtualMachine.new_one(vi_client, deploy_id, one_vm)
    else
        vc_template_ref = drv_action['USER_TEMPLATE/VCENTER_TEMPLATE_REF']
        # VM is new, clone the VM from template
        vm = VCenterDriver::VirtualMachine.new_from_clone(vi_client,
                                                          drv_action,
                                                          vm_id)
        # Set reference to template disks and nics in VM template for detach ops
        vm.reference_unmanaged_devices(vc_template_ref)
    end

    vm.resize_unmanaged_disks

    # Synchronize the OpenNebula VM representation with vCenter VM
    vm.reconfigure
    vm.poweron
    vm.set_running(true)
    puts vm['_ref']

rescue StandardError => e
    message =  "Deploy of VM #{vm_id} on vCenter cluster #{cluster_name} " \
               "with #{dfile} failed due to \"#{e.message}\"."
    OpenNebula.log_error(message)
    if vi_client.get_property_vcenter_conf(:debug_information)
        STDERR.puts "#{message} #{e.backtrace}"
    end
    exit(-1)
ensure
    vi_client.close_connection if vi_client
end
