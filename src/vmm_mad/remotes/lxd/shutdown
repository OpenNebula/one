#!/usr/bin/ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

$LOAD_PATH.unshift File.dirname(__FILE__)

require 'container'

require_relative '../../scripts_common'

# ------------------------------------------------------------------------------
# Action Arguments, STDIN includes XML description of the OpenNebula VM
# ------------------------------------------------------------------------------
vm_name = ARGV[0]
vm_id   = ARGV[2]

xml = STDIN.read

client    = LXDClient.new
container = Container.get(vm_name, xml, client)

# ------------------------------------------------------------------------------
# Stop the container & unmap devices if not a wild container
# ------------------------------------------------------------------------------
begin
    if ARGV[-1] == '-f'
        container.stop(:force => true)
    else
        container.stop
    end
rescue => exception
    OpenNebula.log_error exception
end

if !container.wild?
    # This call may return an operation output instead of a container data
    # in case of timeout. The call breaks the container attributes
    # it needs to be read again

    container = Container.get(vm_name, xml, client) # :status => "Sucess"
    container = Container.get(vm_name, xml, client) unless %w[Running Stopped].include? container.status

    container.stop(:force => true) if container.status == 'Running'

    e = 'Failed to dismantle container storage'
    raise "#{e}\n#{container}" unless container.setup_storage('unmap')

    container.delete
end

container.vnc('stop')
