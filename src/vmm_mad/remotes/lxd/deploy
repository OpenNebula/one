#!/usr/bin/ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

$LOAD_PATH.unshift File.dirname(__FILE__)

require 'container'

require_relative '../../scripts_common'

# ------------------------------------------------------------------------------
# Action Arguments, STDIN includes XML description of the OpenNebula VM
# ------------------------------------------------------------------------------
xml_path = ARGV[0]
vm_id    = ARGV[2]

xml = STDIN.read

# ------------------------------------------------------------------------------
# Action Arguments, STDIN includes XML description of the OpenNebula VM
# ------------------------------------------------------------------------------
client    = LXDClient.new
container = Container.new_from_xml(xml, client)

# ------------------------------------------------------------------------------
# Create Container in LXD
#   - Already exists: gets container metadata from LXD and set OpenNebula
#     configurations to update existing container.
#   - Not exists. Creates new container in LXD.
# ------------------------------------------------------------------------------
if Container.exist?(container.name, client)
    OpenNebula.log_info('Overriding container')

    config  = container.config
    devices = container.devices

    container.get_metadata

    err_msg = 'A container with the same ID is already running'
    raise LXDError, err_msg if container.status == 'Running'

    container.config = config

    container.devices = devices

    container.update
else
    container.create
end

# ------------------------------------------------------------------------------
# Start the container, if not wild, maps storage to host directories
# ------------------------------------------------------------------------------
if container.wild?
    container.start
else
    mapped = container.setup_storage('map')
    raise 'failed to setup container storage' unless mapped

    begin
        operation = container.start
        raise operation if container.status != 'Running'
    rescue LXDError => exception
        storage_deleted = container.setup_storage('unmap')

        if storage_deleted
            container.delete
        else
            OpenNebula.log_error 'failed to dismantle container storage'
        end

        raise LXDError, exception
    end

end

#-------------------------------------------------------------------------------
# Updates container configuration with the OpenNebulaVM description
# ------------------------------------------------------------------------------
container.config.update('user.xml' => xml)
container.update

container.vnc('start')

puts container.name
