#!/usr/bin/ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2020, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

$LOAD_PATH.unshift File.dirname(__FILE__)

require 'container'
require 'base64'

require_relative '../../scripts_common'

# Ref: https://rgxdb.com/r/1NUN74O6
def base64?(str)
    b64_rexp = %r{^(?:[a-zA-Z0-9+/]{4})*(?:|(?:[a-zA-Z0-9+/]{3}=)|(?:[a-zA-Z0-9+/]{2}==)|(?:[a-zA-Z0-9+/]{1}===))$}

    b64_rexp.match?(str.strip)
rescue StandardError
    false
end

# ------------------------------------------------------------------------------
# Action Arguments, STDIN doesn't include XML description of the OpenNebula VM
# ------------------------------------------------------------------------------
vm_name = ARGV[0]

client    = LXDClient.new
container = Container.get(vm_name, nil, client)

xml = container.config['user.xml']
xml = Base64.decode64(xml) if base64?(xml)

container = Container.get(vm_name, xml, client)

force = false
force = true if ARGV[-1] == '-f'

container.reboot(force)
