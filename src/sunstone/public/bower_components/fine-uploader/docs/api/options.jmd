{% extends "_templates/base.html" %}
{% set page_title = "Core Options" %}

{% block sidebar %}
<div id="sidebar-accordion" class="accordion">
</div>
{% endblock %}

{% block js_head %}
<script src="{{ ASSETS }}/js/sidebar.js"></script>
{% endblock %}

{% block js_footer %}
<script>
$(document).ready(function() {
    renderOptionsSidebarNav(['core']);
});
</script>
{% endblock %}

{% block content %}
<div class="all-options">
<div class="options-core">
{% markdown %}
[forms]: ../features/forms.html

# Options <small>Core</small> {: .page-header }

Fine Uploader has a **plethora** of options. Many of these options change meaning
depending on what sort of uploader you are using. Pay close attention to the
mode you are in and keep that in mind when determining which options do what.

## Core
{% endmarkdown %}

{{ api_option("autoUpload", "autoUpload", "Set to `false` if you want to be able to upload queued items later by calling the `uploadStoredFiles()` method.", "Boolean", "true") }}

{{ api_option("button", "button", "Specify an element to use as the 'select files' button. Cannot be a `<button>` ([#33](https://github.com/Widen/fine-uploader/issues/33))", "HTMLElement", "null") }}

{{ api_option("debug", "debug", "This will result in log messages being written to the [`window.console`](https://developer.mozilla.org/en-USDOM/console.log) object", "Boolean", "false") }}

{{ api_option("disableCancelForFormUploads", "disableCancelForFormUploads", "When true the cancel link does not appear next to files when the form uploader is used.", "Boolean", "false") }}

{{ api_option("formatFileName", "formatFileName", "Provide a function to control the display of file names.  The default function limits the name displayed in the UI to 33 characters plus 3 ellipses separating the first and last several characters.  The unformatted file name is passed into the function when it is invoked.", "Function", "") }}

{{ api_option("maxConnections", "maxConnections", "Maxmimum allowable concurrent requests", "Integer", "3") }}

{{ api_option("multiple", "multiple", "When false this will prevent the user from simultaneously selecting or dropping more than one item.", "Boolean", "true") }}

{{ api_parent_option("blobs", "blobs", "",
    (
        ("blobs.defaultName", "defaultName", "The default name to be used for nameless `Blob`s.", "String", "Misc data",),
    )
)
}}

{{ api_parent_option("camera", "camera", "",
    (
        ("camera.button", "button", "`null` means allow camera access on the default button in iOS, otherwise, provide an extra button container element to target.", "HTMLElement", "null",),
        ("camera.ios", "ios", "Enable or disable camera access on iOS (iPod, iPhone, and iPad) devices. Note: Enabling this will disable multiple file selection.", "Boolean", "false",),
    )
)
}}

{{
alert("The `chunking.success.endpoint` option **only** applies to traditional upload endpoints (not S3, Azure, etc).")
}}
{{ api_parent_option("chunking", "chunking", "",
    (
        ("chunking.concurrent.enabled", "concurrent.enabled", "Allow multiple chunks to be uploaded simultaneously per file", "Boolean", "false",),

        ("chunking.enabled", "enabled", "Enable or disable splitting the file separate parts. Each part is sent in a separate request.", "Boolean", "false",),
        ("chunking.partSize", "partSize", "The maximum size of each part, in bytes.", "Integer", "2000000",),

        ("chunking.paramNames.chunkSize", "paramNames.chunkSize", "Name of the parameter passed with a chunked request that specifies the size in bytes of the associated chunk.", "String", "qqchunksize",),
        ("chunking.paramNames.partByteOffset", "paramNames.partByteOffset", "Name of the parameter passed with a chunked request that specifies the starting byte of the associated chunk.", "String", "qqpartbyteoffset",),
        ("chunking.paramNames.partIndex", "paramNames.partIndex", "Name of the parameter passed with a chunked request that specifies the index of the associated partition.", "String", "qqpartindex",),
        ("chunking.paramNames.totalParts", "paramNames.totalParts", "Name of the parameter passed with a chunked request that specifies the total number of chunks associated with the `File` or `Blob`.", "String", "qqtotalparts",),

        ("chunking.success.endpoint", "success.endpoint", "Endpoint to send a POST after all chunks have been successfully uploaded for each file.  Required if the concurrent option is set.", "String", "null",),
    )
)
}}

{{ api_parent_option("cors", "cors", "",
    (
        ("cors.allowXdr", "allowXdr", "Enable or disable cross-origin requests from IE9 and older where [XDomainRequest](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Note) must be used.", "Boolean", "false",),
        ("cors.expected", "expected", "Enable or disable cross-domain requests.", "Boolean", "false",),
        ("cors.sendCredentials", "sendCredentials", "Enable or disable sending credentials along with each cross-domain request. Ignored if `allowXdr` is `true` and IE9 is being used.", "Boolean", "false",),
    )
)
}}

{{ api_parent_option("deleteFile", "deleteFile", "",
    (
        ("deleteFile.customHeaders", "customHeaders", "Any additional headers to attach to all delete file requests.", "Object", "{}",),
        ("deleteFile.enabled", "enabled", "Enable or disable deletion of uploaded files.", "Boolean", "false",),
        ("deleteFile.endpoint", "endpoint", "The endpoint to which delete file requests are sent.", "String", "/server/upload",),
        ("deleteFile.method", "method", "Set the method to use for delete requests. Accepts 'POST' or 'DELETE'", "String", "DELETE",),
        ("deleteFile.params", "params", "Any additional parameters to attach to delete file requests.", "Object", "{}",),
    )
)
}}

{{ api_parent_option("extraButtons", "extraButtons", "This must contain an array of objects. Each object will describe an “extra” button that Fine Uploader will track along with the default upload button. Each button object can contain the following properties:",
    (
        ("extraButtons.element", "element", "REQUIRED: The container element for the upload button.", "HTMLElement", "undefined",),
        ("extraButtons.folders", "folders", "`true` to allow folders to be selected, `false` to allow files to be selected. See the browser support page for details regarding the limited user agent support for this feature.", "Boolean", "false",),
        ("extraButtons.multiple", "multiple", "Specify to override the default `multiple` value.", "Boolean", "true",),
        ("extraButtons.validation", "validation", "Specify to override the default `validation` option specified. Any `validation` properties not specified will be inherited from the default `validation` option.", "Object", "`validation`",),
    )
)
}}

{{ api_parent_option("form", "form", "Override default values for form support.  See the [form support][forms] feature page for more details.",
    (
        ("form.element", "element", "This can be the ID of the `<form>` or a reference to the `<form>` element.", "String, HTMLElement", "qq-form",),
        ("form.autoUpload", "autoUpload", "If Fine Uploader is able to attach to a form, this value takes the place of the base `autoUpload` option.", "Boolean", "false",),
        ("form.interceptSubmit", "interceptSubmit", "Set this to `false` if you do not want Fine Uploader to intercept attempts to submit your form.  By default, Fine Uploader will intercept submit attempts and instead upload all submitted files, including data from your form in each upload request.", "Boolean", "true",)
    )
)
}}

{{ api_parent_option("messages", "messages", "",
    (
        ("messages.emptyError", "emptyError", "Text passed to the error event handler if a submitted item is zero bits.", "String", "{file} is empty, please select files again without it.",),
        ("messages.maxHeightImageError", "maxHeightImageError", "Text passed to the error event handler if an image is too tall.", "String", "Image is too tall.",),
        ("messages.maxWidthImageError", "maxWidthImageError", "Text passed to the error event handler if an image is too wide.", "String", "Image is too wide.",),
        ("messages.minHeightImageError", "minHeightImageError", "Text passed to the error event handler if an image is not tall enough.", "String", "Image is not tall enough.",),
        ("messages.minWidthImageError", "minWidthImageError", "Text passed to the error event handler if an image is not wide enough.", "String", "Image is not wide enough.",),
        ("messages.minSizeError", "minSizeError", "Text passed to the error event handler if the item is too small.", "String", "{file} is too small, minimum file size is {minSizeLimit}.",),
        ("messages.noFilesError", "noFilesError", "Text passed to the error event handler if any empty array of items is submitted.", "String", "No files to upload.",),
        ("messages.onLeave", "onLeave", "Text displayed to the user when they attempt to leave the page while uploads are still in progress.", "String", "The files are being uploaded, if you leave now the upload will be canceled.",),
        ("messages.retryFailTooManyItemsError", "retryFailTooManyItemsError", "Text passed to the error event handler if a retry attempt is declared a failed due to a violation of the `validation.itemLimit` rule.", "String", "Retry failed - you have reached your file limit.",),
        ("messages.sizeError", "sizeError", "Text passed to the error event handler if a submitted item is too large.", "String", "{file} is too large, maximum file size is {sizeLimit}.",),
        ("messages.tooManyItemsError", "tooManyItemsError", "Text passed to the error event handler if a submit is ignored due to a violation of the `validation.itemLimit` rules.", "String", "Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.",),
        ("messages.typeError", "typeError", "Text passed to the error event handler if an invalid file type is detected.", "String", "{file} has an invalid extension. Valid extension(s): {extensions}.",),
    )
)
}}

{{ api_parent_option("paste", "paste", "",
    (
        ("paste.defaultName", "defaultName", "The default name given to pasted images.", "String", "pasted_image",),
        ("paste.targetElement", "targetElement", "Enable this feature by providing any `HTMLElement` here.", "HTMLElement", "null",),
    )
)
}}

{{ api_parent_option("resume", "resume", "",
    (
        ("resume.recordsExpireIn", "recordsExpireIn", "The number of days before a persistent resume record will expire.", "Integer", "7",),
        ("resume.enabled", "enabled", "Enable or disable the ability to resume failed or stopped chunked uploads.", "Boolean", "false",),
        ("resume.paramNames.resuming", "paramNames.resuming", "Sent with the first request of the resume with a value of `true`.", "String", "qqresume",),
    )
)
}}

{{ api_parent_option("retry", "retry", "",
    (
        ("retry.autoAttemptDelay", "autoAttemptsDelay", "The number of seconds to wait between auto retry attempts.", "Integer", "5",),
        ("retry.enableAuto", "enableAuto", "Enable or disable retrying uploads that receive any error or non-200 response.", "Boolean", "false",),
        ("retry.maxAutoAttempts", "maxAutoAttempts", "The maximum number of times to attempt to retry a failed upload.", "Integer", "3",),
        ("retry.preventRetryResponseProperty", "preventRetryResponseProperty", "This property will be looked for in the server response and, if found and `true`, will indicate that no more retries should be attempted for this item.", "String", "preventRetry",),
    )
)
}}

{{ api_parent_option("request", "request", "",
    (
        ("request.customHeaders", "customHeaders", "Additional headers sent along with each upload request.", "Object", "{}",),
        ("request.endpoint", "endpoint", "The endpoint to send upload requests to.", "String", "/server/upload",),
        ("request.filenameParam", "filenameParam", "The name of the parameter passed if the original filename has been editied or a `Blob` is being sent.", "String", "qqfilename",),
        ("request.forceMultipart", "forceMultipart", "Force all uploads to use multipart encoding", "Boolean", "true",),
        ("request.inputName", "inputName", "The attribute of the input element which will contain the file name. Not applicable to non AJAX uploads.", "String", "qqfile",),
        ("request.params", "params", "The parameters that shall be sent with each upload request.", "Object", "{}",),
        ("request.paramsInBody", "paramsInBody", "Enable or disable sending parameters in the request body. If `false`, parameters are sent in the URL. Otherwise, parameters are sent in the request body.", "Boolean", "true",),
        ("request.uuidName", "uuidName", "The name of the parameter the uniquely identifies each associated item. The value is a [Level 4 UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29).", "String", "qquuid",),
        ("request.totalFileSizeName", "totalFileSizeName", "The name of the parameter passed that specifies the total file size in bytes.", "String", "qqtotalfilesize",),
    )
)
}}

{{ api_parent_option("scaling", "scaling", "See the [Upload Scaled Images feature page](../feature/scaling.html) for more details.",
    (
        ("scaling.defaultQuality", "defaultQuality", "A value between 1 and 100 that describes the requested quality of scaled images.  Ignored unless the scaled image type target is image/jpeg.", "Integer", "80",),
        ("scaling.defaultType", "defaultType", "Scaled images will assume this image type if you don't specify a specific type in your size object, or if the type specified in the size object is not valid.  You generally should not use any value other than image/jpeg or image/png here.  The default value of `null` will ensure the scaled image type is PNG, unless the original file is a JPEG, in which case the scaled file will also be a JPEG.  The default is probably the safest option.", "String", "null",),
        ("scaling.failureText", "failureText", "Text sent to your `complete` event handler as an `error` property of the `response` param if a scaled image could not be generated.", "String", "Failed to scale",),
        ("scaling.includeExif", "includeExif", "Ensure the EXIF data from the reference image is inserted into the scaled image.  Only applicable when both the reference and the target are type image/jpeg.", "Boolean", "false",),
        ("scaling.orient", "orient", "Set this to `false` if you do not want scaled images to be re-oriented based on parsed EXIF data before they are uploaded.", "Boolean", "true",),
        ("scaling.sendOriginal", "sendOriginal", "Set this to `false` if you don't want to original file to be uploaded as well.", "Boolean", "true",),
        ("scaling.sizes", "sizes", "An array containing size objects that describe scaled versions of each submitted image that should be generated and uploaded.  A size object must contain a `name` String property, a `maxSize` integer property, and optionally a `type` MIME string property.", "Array", "[]",),
    )
)
}}

{{ api_parent_option("session", "session", "See the [Initial File List feature page](../features/session.html) for more details.",
    (
        ("session.customHeaders", "customHeaders", "Any additional headers you would like included with the GET request sent to your server. Ignored in IE9 and IE8 if the endpoint is cross-origin.", "Object", "{}",),
        ("session.endpoint", "endpoint", "If non-null, Fine Uploader will send a GET request on startup to this endpoint, expecting a JSON response containing data about the initial file list to populate.", "String", "null",),
        ("session.params", "params", "Any parameters you would like passed with the associated GET request to your server.", "Object", "{}",),
        ("session.refreshOnRequest", "refreshOnRequest", "Set this to `false` if you do not want the file list to be retrieved from the server as part of a reset.", "Boolean", "true",),
    )
)
}}

{{ api_parent_option("text", "text", "",
    (
        ("text.defaultResponseError", "defaultResponseError", "In the event of non-200 response from the server sans the 'error' property, this message will be passed to the 'error' event handler.", "String", "Upload failure reason unknown",),
        ("text.sizeSymbols", "sizeSymbols", "Symbols used to represent file size, in ascending order.", "Array", "['kB', 'MB', 'GB', 'TB', 'PB', 'EB']",),
    )
)
}}

{{ api_parent_option("validation", "validation", "",
    (
        ("validation.acceptFiles", "acceptFiles", "Used by the file selection dialog. Restrict the valid file types that appear in the selection dialog by listing valid content-type specifiers here. See docs on the [accept attribute of the `<input>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input)", "Comma-delimited list of valid MIMEtypes", "null",),
        ("validation.allowedExtensions", "allowedExtensions", "Specify file valid file extensions here to restrict uploads to specific types.", "Array", "[]",),
        ("validation.itemLimit", "itemLimit", "Maximum number of items that can be potentially uploaded in this session. Will reject all items that are added or retried after this limit is reached.", "Integer", "0",),
        ("validation.minSizeLimit", "minSizeLimit", "The minimum allowable size, in bytes, for an item.", "Integer", "0",),
        ("validation.sizeLimit", "sizeLimit", "The maximum allowable size, in bytes, for an item.", "Integer", "0",),
        ("validation.stopOnFirstInvalidFile", "stopOnFirstInvalidFile", "When `true` the first invalid item will stop processing further files.", "Boolean", "true",),

        ("validation.image.maxHeight", "image.maxHeight", "Restrict images to a maximum height in pixels (wherever possible).", "Integer", "0",),
        ("validation.image.maxWidth", "image.maxWidth", "Restrict images to a maximum width in pixels (wherever possible).", "Integer", "0",),
        ("validation.image.minHeight", "image.minHeight", "Restrict images to a minimum height in pixels (wherever possible).", "Integer", "0",),
        ("validation.image.minWidth", "image.minWidth", "Restrict images to a minimum width in pixels (wherever possible).", "Integer", "0",),
    )
)
}}
</div>
</div>

{% endblock %}
