{% extends "_templates/base.html" %}
{% set page_title = "S3 Methods" %}

{% block sidebar %}
<div id="sidebar-accordion" class="accordion">
</div>
{% endblock %}

{% block js_head %}
<script src="{{ ASSETS }}/js/sidebar.js"></script>
{% endblock %}

{% block js_footer %}
<script type="text/javascript">
$(document).ready(function() {
    renderMethodsSidebarNav(['s3']);
});
</script>
{% endblock %}


{% block content %}
{% markdown %}
# Methods <small>S3</small>{: .page-header }
{% endmarkdown %}

<div class="all-methods" data-spy="" data-target="">
<div class="methods-s3">

{% markdown %}
## S3

The S3 uploader provides many of the same API methods as the traditional
uploader, but there are a few crucial differences to take into account.
If you plan to use the S3 uploader, then use the following table as your API
reference.  All methods outlined in the core or UI documentation are also available
in Fine Uploader S3, unless otherwise noted here.
{% endmarkdown %}

{{ api_method("getKey", "getKey (fileId)", "Retreive the S3 object key with the associated ID",
[
        {
            "name": "fileId",
            "type": "Integer",
            "description": "An ID corresponding to a file."
        },
],
[
    {
        "type": "String",
        "description": "The S3 object key associated with the fileID."
    }
]) }}

{{ api_method("getResumableFilesData", "getResumableFilesData ()", "Returns an array of potentially resumable items. Each resumable is represented by an object with the following properties:

| Property | Description |
| -------- | :---------- |
| `name`   | filename |
| `uuid`   | the unique id |
| `partIdx` | the index of the part where the resume will start from |
| `key` | The associated object's S3 key |
", null,
[
    {
        "type": "Array",
        "description": "An array of resumable items. "
    }

]) }}

{{ api_method("setAcl", "setAcl (newAcl[, id])", "Set/update the ACL to be used for one or all file uploads.  If the ID is omitted, the new ACL targets all future files that have not yet been uploaded.",
[
    {
        "name": "newAcl",
        "type": "String",
        "description": "Canned ACL value to be sent with the upload request.  Used by S3."
    },
    {
        "name": "id",
        "type": "Integer",
        "description": "File ID to target the ACL."
    }
])}}

{{ api_method("setCredentials", "setCredentials (newCredentials)", "Pass new or initial credentials.  This is used to support the no-server workflow.",
[
    {
        "name": "newCredentials",
        "type": "Object",
        "description": "The new or initial credentials to set for server-less uploads"
    }
])}}

{{ api_method("setEndpoint", "setEndpoint (bucketPath[, id])",
"Modify the bucket where upload requests should be directed. The endpoint for a specific file or blob can be changed by passing in an optional `id` parameter. An `id` will always be a number and refers to a single file. All valid bucket URLs documented by Amazon are supported, including custom domains. SSL is also supported.",
[
        {
            "name": "bucketPath",
            "type": "String",
            "description": "The new S3 bucket path"
        },
        {
            "name": "id",
            "type": "Integer",
            "description": "An ID corresponding to a file."
        },
]) }}

{{ api_method("setUploadSuccessParams", "setUploadSuccessParams (newParams[, id])",
"Set additional parameters for the upload success request. Note that Fine Uploader will still send the bucket name, key, filename, UUID, and etag (if available) as well.",
[
        {
            "name": "newParams",
            "type": "Object",
            "description": "The additional parameters set for the upload request."
        },
        {
            "name": "id",
            "type": "Integer",
            "description": "A file id to apply these upload success parameters to."
        },
]) }}
</div>
</div>

{% endblock %}
