#!/usr/bin/env ruby
# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cloud"


require 'cli/command_parser'
require 'cli/cli_helper'
require 'econe/EC2QueryClient'

include CloudCLI


USER_DATA = {
    :name => "user_data",
    :short => "-d data",
    :large => "--user-data data",
    :description => "Specifies Base64-encoded MIME user data to be made
        available to the instance",
    :format => String
}

TYPE = {
    :name => "type",
    :short => "-t type",
    :large => "--type type",
    :description => "OpenNebula template in which is based this instance",
    :format => String
}

KEYNAME = {
    :name => "keypair",
    :short => "-k keypair",
    :large => "--keypair keypair",
    :description => "The name of the key pair.",
    :format => String
}

INSTANCE_COUNT = {
    :name => "instance_count",
    :large => "--instance-count count",
    :short => "-n",
    :description => "The number of instances to launch. If OpenNebula cannot " <<
        "launch the specified number of instances, no instances will launch." <<
        " If this is specified as a range (min-max), OpenNebula will try to " <<
        "launch the maximum number, but no fewer than the minimum number." <<
        "Example: -n 5-10",
    :format => String,
    :proc => lambda do |o, opts|
        opts[:min_count], opts[:max_count] = o.split('-')
        nil
    end
}

TABLE = CLIHelper::ShowTable.new(nil, self) do
    column :instanceId, "instanceId", :size=>12 do |d|
        d["instanceId"]
    end

    column :ImageId, "ImageId", :size=>13 do |d|
        d["imageId"]
    end

    column :State, "State", :size=>14 do |d|
        d["instanceState"]['name']
    end

    column :IP, "IP", :size=>18 do |d|
        d['privateIpAddress']
    end

    column :instanceType, "instanceType", :size=>12 do |d|
        d["instanceType"]
    end

    default :instanceId, :ImageId, :State, :IP, :instanceType
end



CommandParser::CmdParser.new(ARGV) do
    usage "econe-run-instances [OPTIONS] IMAGE-ID"
    version CloudCLI.version_text
    description <<-EOT
Runs an instance of a particular image
IMAGE-ID: The image identification as returned by the econe-upload command
EOT

    option [
        CommandParser::VERBOSE,
        CommandParser::HELP,
        CommandParser::VERSION,
        EC2QueryClient::ACCESS_KEY,
        EC2QueryClient::SECRET_KEY,
        EC2QueryClient::URL,
        USER_DATA,
        INSTANCE_COUNT,
        TYPE,
        KEYNAME
    ]

    main :image_id do
        begin
            ec2_client = EC2QueryClient::Client.new(
                options[:access_key],
                options[:secret_key],
                options[:url])
        rescue Exception => e
            puts "#{cmd_name}: #{e.message}"
            exit -1
        end

        options[:type] ||= "m1.small"
        options[:min_count] ||= 1
        options[:max_count] ||= options[:min_count]

        rc = ec2_client.run_instances(
                :image_id       => args[0],
                :instance_type  => options[:type],
                :user_data      => options[:user_data],
                :min_count      => options[:min_count],
                :max_count      => options[:max_count],
                :key_name       => options[:keypair])

        if CloudClient::is_error?(rc)
            exit_with_code -1, "#{cmd_name}: #{rc.message}"
        else
            TABLE.show(rc['instancesSet']['item'] || [])
            exit_with_code 0
        end
    end
end

