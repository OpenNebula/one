#!/usr/bin/env ruby
# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cloud"

require 'cli/command_parser'
require 'cli/cli_helper'
require 'econe/EC2QueryClient'

include CloudCLI

CommandParser::CmdParser.new(ARGV) do
    usage "econe-allocate-address [OPTIONS]"
    description "Allocate a new elastic IP address for the user"
    version CloudCLI.version_text

    option [
        CommandParser::VERBOSE,
        CommandParser::HELP,
        CommandParser::VERSION,
        EC2QueryClient::ACCESS_KEY,
        EC2QueryClient::SECRET_KEY,
        EC2QueryClient::URL
    ]

    main do
        begin
            ec2_client = EC2QueryClient::Client.new(
                options[:access_key],
                options[:secret_key],
                options[:url])
        rescue Exception => e
            puts "#{cmd_name}: #{e.message}"
            exit -1
        end

        addr = ec2_client.allocate_address

        if CloudClient::is_error?(addr)
            [-1, "#{cmd_name}: #{addr.message}"]
        else
            exit_code 0

            if options[:headers]
                CLIHelper.print_header("publicIP")
            end

            puts addr['publicIP']
        end
    end
end
