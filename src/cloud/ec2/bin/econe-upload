#!/usr/bin/env ruby
# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cloud"


require 'cli/command_parser'
require 'cli/cli_helper'
require 'econe/EC2QueryClient'

include CloudCLI

MULTIPART = {
    :name => "multipart",
    :short => "-M",
    :large => "--multipart",
    :description => "Use 'multipart-post' library instead of Curb/Curl"
}


CommandParser::CmdParser.new(ARGV) do
    usage "econe-upload [OPTIONS] IMAGE-PATH"
    version CloudCLI.version_text
    description <<-EOT
Uploads an image for use with an OpenNebula Cloud. This image should
be later register with econe-register using the returned ImageId
IMAGE-PATH: Path to the image to upload
EOT

    option [
        CommandParser::VERBOSE,
        CommandParser::HELP,
        CommandParser::VERSION,
        EC2QueryClient::ACCESS_KEY,
        EC2QueryClient::SECRET_KEY,
        EC2QueryClient::URL,
        MULTIPART
    ]

    main :file do
        begin
            ec2_client = EC2QueryClient::Client.new(
                options[:access_key],
                options[:secret_key],
                options[:url])
        rescue Exception => e
            puts "#{cmd_name}: #{e.message}"
            exit -1
        end

        rc = ec2_client.upload_image(args[0], !options[:multipart])

        if CloudClient::is_error?(rc)
            exit_with_code -1, "#{cmd_name}: #{rc.message}"
        else
            puts "Success: ImageId #{rc['imageId']}"
            exit_with_code 0
        end
    end
end
